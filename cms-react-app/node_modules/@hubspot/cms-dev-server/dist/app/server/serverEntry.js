import { jsx, jsxs, Fragment } from "react/jsx-runtime";
import * as React from "react";
import React__default, { createContext, useContext, useRef, useLayoutEffect, useId, useState, useEffect, lazy, Suspense, useCallback, StrictMode } from "react";
import "path";
import "dot-prop";
import "@babel/parser";
import _traverse from "@babel/traverse";
import "@babel/types";
import stream from "stream";
import { renderToPipeableStream } from "react-dom/server";
import * as TooltipPrimitive from "@radix-ui/react-tooltip";
import { clsx } from "clsx";
import { twMerge } from "tailwind-merge";
import { Slot } from "@radix-ui/react-slot";
import { cva } from "class-variance-authority";
import { Check, CircleCheck, TriangleAlert, ExternalLink, Copy, ClipboardCopy, X, Braces, ServerCrash, ArrowRightLeft } from "lucide-react";
import * as SheetPrimitive from "@radix-ui/react-dialog";
import * as SeparatorPrimitive from "@radix-ui/react-separator";
const scriptTagToLogServerMessages = (messagesForBrowser, groupLabel, nonceAttribute) => {
  if (!messagesForBrowser) {
    return "";
  }
  const consoleLines = [];
  for (const message of messagesForBrowser) {
    let funcString = "console.log";
    if (message.level === "error") {
      funcString = "console.error";
    }
    if (message.level === "warn") {
      funcString = "console.warn";
    }
    const argString = message.parameters.map((arg) => JSON.stringify(arg)).join(", ");
    consoleLines.push(`  ${funcString}(${argString});`);
  }
  let groupStart = "";
  let groupEnd = "";
  if (groupLabel !== void 0 && groupLabel !== null) {
    groupStart = `
  console.group(${JSON.stringify(groupLabel)});`;
    groupEnd = `  console.groupEnd()
`;
  }
  return `<script ${nonceAttribute}>${groupStart}
${consoleLines.join("\n")}
${groupEnd}<\/script>
`;
};
function buildStaticEnvConfig(portalID, hublet, hsEnv, hsDeployed, hsJSRGates, hsRenderSource) {
  const getPortalID2 = () => portalID;
  const getHubID = getPortalID2;
  const getHublet2 = () => hublet;
  const getInternalHSEnv = () => hsEnv;
  const getIsDeployed2 = () => hsDeployed;
  const getInternalRenderSource2 = () => hsRenderSource;
  const getGates = () => hsJSRGates;
  const toJSON = () => ({
    portalID,
    hublet,
    hsEnv,
    hsDeployed,
    hsJSRGates
  });
  const equals = (envConfig) => {
    return portalID === envConfig.getPortalID() && hsEnv === envConfig.getInternalHSEnv() && hublet === envConfig.getHublet() && hsDeployed === envConfig.getIsDeployed();
  };
  return {
    getPortalID: getPortalID2,
    getHubID,
    getHublet: getHublet2,
    getInternalHSEnv,
    getIsDeployed: getIsDeployed2,
    equals,
    getGates,
    getInternalRenderSource: getInternalRenderSource2,
    toJSON
  };
}
const __vite_import_meta_env__ = { "BASE_URL": "/", "DEV": false, "MODE": "production", "PROD": true, "SSR": true };
var AsyncStorageForServerContext;
async function wrapServerCodeWithRenderContext(contextValue, callback) {
  var _a;
  if (!((_a = __vite_import_meta_env__) == null ? void 0 : _a.SSR)) {
    throw new Error(`Cannot use server context from browser`);
  }
  if (!AsyncStorageForServerContext) {
    const { AsyncLocalStorage } = await import("async_hooks");
    AsyncStorageForServerContext = new AsyncLocalStorage();
  }
  AsyncStorageForServerContext.run(contextValue, () => {
    callback();
  });
}
var getRenderContextFromAsyncLocalStorage = () => {
  var _a;
  if (!((_a = __vite_import_meta_env__) == null ? void 0 : _a.SSR)) {
    throw new Error(`Cannot use server context from browser`);
  }
  return AsyncStorageForServerContext ? AsyncStorageForServerContext.getStore() : void 0;
};
var renderSequenceNum = 1;
var createNewServerRequestMap = (renderId) => {
  if (import.meta && __vite_import_meta_env__ && void 0) {
    return /* @__PURE__ */ new Map([["__tempRenderId", renderId]]);
  }
  return /* @__PURE__ */ new Map();
};
var createServerRenderContext$1 = (pageUrl, environmentConfig, sharedServerRequestData) => {
  const renderId = (renderSequenceNum++).toString(16);
  const perServerRequestData = sharedServerRequestData ?? createNewServerRequestMap(renderId);
  return {
    pageUrl,
    environmentConfig,
    islands: [],
    inlineAssets: [],
    renderId,
    perServerRequestData,
    messagesForBrowser: [],
    // Satisfies ServerRenderContextValueType
    entryPointBasePath: null,
    criticalDevErrors: [],
    modules: {},
    contentDescriptors: { modules: {}, dndAreas: {} }
  };
};
var createServerRenderContextV2$1 = (pageUrl, {
  environmentConfig,
  entryPointBasePath,
  sharedServerRequestData,
  supplementalFieldValues,
  messagesForBrowser = [],
  resolvedDataDependencies
}) => {
  const renderId = (renderSequenceNum++).toString(16);
  const perServerRequestData = sharedServerRequestData ?? createNewServerRequestMap(renderId);
  return {
    pageUrl,
    environmentConfig,
    islands: [],
    inlineAssets: [],
    renderId,
    perServerRequestData,
    messagesForBrowser,
    entryPointBasePath,
    supplementalFieldValues,
    criticalDevErrors: [],
    modules: {},
    contentDescriptors: {
      modules: {},
      dndAreas: {}
    },
    resolvedDataDependencies
  };
};
var createEmptyServerRenderContext = () => createServerRenderContextV2$1(null, { environmentConfig: null });
var ServerRenderContext = createContext(
  createEmptyServerRenderContext()
);
var useServerRenderContext = () => {
  var _a;
  if (!((_a = __vite_import_meta_env__) == null ? void 0 : _a.SSR)) {
    throw new Error(`Cannot use server context from browser`);
  }
  const contextValueFromAls = getRenderContextFromAsyncLocalStorage();
  if (contextValueFromAls) {
    return contextValueFromAls;
  }
  return useContext(ServerRenderContext);
};
var createClientRenderContext = (hsServerPageUrl, hsBasePath, islands = []) => {
  return {
    pageUrl: hsServerPageUrl,
    islands,
    island: null,
    hydrationFinished: { current: false },
    entryPointBasePath: hsBasePath
  };
};
var ClientRenderContext = createContext(
  createClientRenderContext(null, null)
);
var ClientRenderContextProvider = ({
  children,
  islands,
  island,
  pageUrl,
  basePath,
  onTopLevelHydrationFinish
}) => {
  const hydrationFinished = useRef(false);
  const contextValue = {
    pageUrl,
    islands,
    hydrationFinished,
    island,
    entryPointBasePath: basePath,
    supplementalFieldValues: island == null ? void 0 : island.supplementalFieldValues
  };
  useLayoutEffect(() => {
    if (hydrationFinished.current) {
      return;
    }
    hydrationFinished.current = true;
    if (onTopLevelHydrationFinish) {
      onTopLevelHydrationFinish();
    }
  }, [onTopLevelHydrationFinish]);
  return /* @__PURE__ */ jsx(ClientRenderContext.Provider, { value: contextValue, children });
};
var useClientRenderContext = () => useContext(ClientRenderContext);
var useRenderContext = () => {
  {
    return useContext(ServerRenderContext);
  }
};
var useGetRenderRequestId = () => {
  return useServerRenderContext().renderId;
};
var useGetPerRequestMap_internal = () => {
  const renderContext = useServerRenderContext();
  return renderContext.perServerRequestData;
};
var mergeServerRequestData_internal = (dataA, dataB) => {
  const toMerge = [...dataA, ...dataB];
  if (dataA.has("sharedStateIDs") && dataB.has("sharedStateIDs")) {
    const mergedSet = /* @__PURE__ */ new Set([
      ...dataA.get("sharedStateIDs"),
      ...dataB.get("sharedStateIDs")
    ]);
    toMerge.push(["sharedStateIDs", mergedSet]);
  }
  return new Map(toMerge);
};
var useInlineHeadAsset = (renderFunc) => {
  if (!__vite_import_meta_env__ || false) {
    return;
  }
  const renderContext = useServerRenderContext();
  renderContext.inlineAssets.push({
    type: "inline_html",
    location: "CSS_HEAD",
    render: renderFunc
  });
};
var UNSET_SHARED_STATE_ID = "hs-basic-shared-state-unset-id";
var ExistingIslandContext = createContext(null);
var ExistingIslandContextProvider = ExistingIslandContext.Provider;
function useIsInsideIsland() {
  return useContext(ExistingIslandContext) != null;
}
var SharedIslandStateContext = createContext({
  id: UNSET_SHARED_STATE_ID,
  state: null
});
function useSharedIslandStateID() {
  return useContext(SharedIslandStateContext).id;
}
function useHasSharedIslandState() {
  return useSharedIslandStateID() !== UNSET_SHARED_STATE_ID;
}
function SharedIslandReducer({
  children,
  value,
  id: id2,
  reducer,
  customReducerFunc
}) {
  if (useHasSharedIslandState()) {
    throw new Error(`Cannot nest SharedIsland components`);
  } else if (value === void 0) {
    throw new Error(`No initial value defined for shared state`);
  } else if (useIsInsideIsland()) {
    throw new Error(`Shared state cannot be defined inside an island`);
  }
  const sharedStateID = id2 ?? `hs-ss-${useId()}`;
  const renderContext = useServerRenderContext();
  let reducerFuncModuleId;
  if (!customReducerFunc) {
    reducerFuncModuleId = reducer.moduleId;
  }
  const sharedStateValue = {
    value,
    reducerFuncModuleId,
    hasCustomReducerFunc: !!customReducerFunc
  };
  renderContext.perServerRequestData.set(sharedStateID, sharedStateValue);
  const sharedStateIDs = renderContext.perServerRequestData.get("sharedStateIDs") ?? /* @__PURE__ */ new Set();
  if (!sharedStateIDs.has(sharedStateID)) {
    renderContext.perServerRequestData.set(
      "sharedStateIDs",
      /* @__PURE__ */ new Set([...sharedStateIDs, sharedStateID])
    );
  }
  return /* @__PURE__ */ jsx(
    SharedIslandStateContext.Provider,
    {
      value: {
        id: sharedStateID,
        state: sharedStateValue
      },
      children
    }
  );
}
function useSharedIslandReducerInternal(customReducerFunc) {
  {
    return useSharedIslandReducerServerHelper();
  }
}
function useSharedIslandReducer() {
  return useSharedIslandReducerInternal();
}
function useSharedIslandReducerServerHelper() {
  const { state, id: id2 } = useContext(SharedIslandStateContext);
  let updaterFunc;
  return [state.value, updaterFunc, id2];
}
function priorityByHydrateOnType(hydrateOn) {
  const hydrationPriorty = ["load", "visible", "idle"];
  const index = hydrationPriorty.indexOf(hydrateOn);
  if (index === -1) {
    throw new Error(`Unknown hydrateOn type (${hydrateOn})`);
  }
  return index;
}
function sortIslandRootsByPriority(roots) {
  return Array.from(roots.values()).sort((a, b) => {
    if (a.hydrateOn === b.hydrateOn) {
      return a.priority - b.priority;
    } else {
      return priorityByHydrateOnType(a.hydrateOn) - priorityByHydrateOnType(b.hydrateOn);
    }
  });
}
async function load() {
  if (__vite_import_meta_env__ && false) {
    throw new Error("Never supposed to get here");
  } else {
    const result = await import("./assets/RenderTreeSeparately-T6CL43QJ-D50VfKo0.js");
    return result;
  }
}
function buildIslandID(baseId) {
  if (baseId.startsWith(":") && baseId.endsWith(":")) {
    baseId = baseId.substring(1, baseId.length - 1);
  }
  return `island-${baseId}`;
}
function buildIslandIdentifierPrefix(islandID) {
  return `${islandID}-`;
}
function RenderIslandSeparately({
  id: id2,
  lazyModule,
  componentProps,
  WrapperElement,
  wrapperStyle,
  wrapperClassName,
  Wrapper
}) {
  const renderContext = useServerRenderContext();
  const sharedIslandState = useContext(SharedIslandStateContext);
  const LazyComponent = lazy(lazyModule);
  const RenderTreeSeparately = lazy(async () => ({
    default: (await load()).RenderTreeSeparately
  }));
  const uniqueRenderID = { id: `${renderContext.renderId}-${id2}` };
  let innerTreeElements = /* @__PURE__ */ jsx(LazyComponent, { islandId: id2, ...componentProps });
  if (sharedIslandState.id !== UNSET_SHARED_STATE_ID) {
    innerTreeElements = /* @__PURE__ */ jsx(SharedIslandStateContext.Provider, { value: sharedIslandState, children: innerTreeElements });
  }
  if (Wrapper) {
    const LazyWrapper = lazy(Wrapper);
    innerTreeElements = /* @__PURE__ */ jsx(LazyWrapper, { children: innerTreeElements });
  }
  innerTreeElements = /* @__PURE__ */ jsx(
    Suspense,
    {
      fallback: `server render fail/waiting for ${id2} (separate island render, inside)`,
      children: /* @__PURE__ */ jsx(ServerRenderContext.Provider, { value: renderContext, children: /* @__PURE__ */ jsx(ExistingIslandContextProvider, { value: lazyModule.moduleId, children: innerTreeElements }) })
    }
  );
  return /* @__PURE__ */ jsx(
    Suspense,
    {
      fallback: `server render fail/waiting for ${id2} (separate island render, outside)`,
      children: /* @__PURE__ */ jsx(
        RenderTreeSeparately,
        {
          uniqueRenderID,
          innerTree: innerTreeElements,
          WrapperElement,
          wrapperID: id2,
          wrapperStyle,
          wrapperClassName,
          renderOptions: {
            identifierPrefix: buildIslandIdentifierPrefix(id2),
            onError: (error) => {
              renderContext.messagesForBrowser.push({
                level: "error",
                parameters: [
                  `Error in island ${lazyModule.moduleId}`,
                  error.name,
                  error.stack
                ]
              });
            }
          }
        }
      )
    }
  );
}
function Island({
  id: id2,
  wrapperTag: WrapperElement = "div",
  wrapperStyle,
  wrapperClassName,
  module,
  hydrateOn = "load",
  clientOnly = false,
  priority = 0,
  Wrapper,
  ...moduleProps
}) {
  const instanceId = buildIslandID(useId());
  const resolvedId = id2 ?? instanceId;
  const isInsideIsland = useIsInsideIsland();
  const sharedStateID = useSharedIslandStateID();
  if (!module.moduleId) {
    throw new Error(
      `No moduleId found on module. Module must be from import with ?island suffix.`
    );
  }
  for (const key in moduleProps) {
    if (Object.hasOwn(moduleProps, key)) {
      const type = typeof moduleProps[key];
      if (type === "function") {
        throw new Error(
          `All pass-though props to Island must be serializable. No functions, etc (${key})`
        );
      }
    }
  }
  if (!isInsideIsland) {
    const islandData = {
      id: resolvedId,
      moduleName: module.moduleName,
      moduleId: module.moduleId,
      hydrateOn,
      clientOnly,
      priority,
      props: moduleProps,
      sharedStateID: sharedStateID !== UNSET_SHARED_STATE_ID ? sharedStateID : void 0
    };
    if (Wrapper) {
      islandData.wrapperModuleId = Wrapper.moduleId;
    }
    useAddIslandRoot(islandData);
  }
  if (clientOnly) {
    return /* @__PURE__ */ jsx(
      WrapperElement,
      {
        "data-hs-island": true,
        id: resolvedId,
        style: wrapperStyle,
        className: wrapperClassName
      }
    );
  } else {
    return /* @__PURE__ */ jsx(
      RenderIslandSeparately,
      {
        id: resolvedId,
        lazyModule: module,
        componentProps: moduleProps,
        WrapperElement,
        wrapperStyle,
        wrapperClassName,
        Wrapper
      }
    );
  }
}
function useAddIslandRoot(newIsland) {
  const renderContext = useServerRenderContext();
  if (renderContext.islands.some((i) => i.id === newIsland.id)) {
    throw new Error(`Duplicate island ID ${newIsland.id}`);
  }
  newIsland.resolvedDataDependencies = renderContext.resolvedDataDependencies;
  newIsland.supplementalFieldValues = renderContext.supplementalFieldValues;
  renderContext.islands = sortIslandRootsByPriority([
    ...renderContext.islands,
    newIsland
  ]);
}
var Island_default = Island;
var MAX_AGE_CACHE_FOR_AN_HOUR = {
  cacheControl: {
    maxAge: 3600,
    sharedMaxAge: 3600
  }
};
var ALL_MODULE_DATA_FETCH_DEPENDENCY_TYPES = [
  "moduleProps",
  "moduleProps-urlWithoutQuery",
  "moduleProps-urlWithQuery",
  "moduleProps-urlWithQuery-contact",
  "moduleProps-urlWithQuery-contact-fullRequest"
];
var MODULE_DATA_FETCH_DEPENDENCY_AS_OBJECT = /* @__PURE__ */ new Map([
  [
    void 0,
    {
      moduleProps: true,
      urlWithoutQuery: false,
      urlWithQuery: false,
      contact: false,
      fullRequest: false
    }
  ],
  [
    "moduleProps",
    {
      moduleProps: true,
      urlWithoutQuery: false,
      urlWithQuery: false,
      contact: false,
      fullRequest: false
    }
  ],
  [
    "moduleProps-urlWithoutQuery",
    {
      moduleProps: true,
      urlWithoutQuery: true,
      urlWithQuery: false,
      contact: false,
      fullRequest: false
    }
  ],
  [
    "moduleProps-urlWithQuery",
    {
      moduleProps: true,
      urlWithoutQuery: true,
      urlWithQuery: true,
      contact: false,
      fullRequest: false
    }
  ],
  [
    "moduleProps-urlWithQuery-contact",
    {
      moduleProps: true,
      urlWithoutQuery: true,
      urlWithQuery: true,
      contact: true,
      fullRequest: false
    }
  ],
  [
    "moduleProps-urlWithQuery-contact-fullRequest",
    {
      moduleProps: true,
      urlWithoutQuery: true,
      urlWithQuery: true,
      contact: true,
      fullRequest: true
    }
  ]
]);
function getEnvironmentConfig() {
  {
    return useServerRenderContext().environmentConfig;
  }
}
var getPortalID = () => {
  return getEnvironmentConfig().getPortalID();
};
var getHublet = () => {
  return getEnvironmentConfig().getHublet();
};
var getIsDeployed = () => {
  return getEnvironmentConfig().getIsDeployed();
};
var getIsUngatedFor = (gateName) => {
  return getEnvironmentConfig().getGates().includes(gateName);
};
var getInternalRenderSource = () => {
  return getEnvironmentConfig().getInternalRenderSource();
};
var SCRIPT_NONCE_PLACEHOLDER = "hs-random-nonce";
var STYLE_NONCE_PLACEHOLDER = "hs-random-style-nonce";
function getScriptNonce() {
  return getInternalRenderSource() === "worker" ? SCRIPT_NONCE_PLACEHOLDER : void 0;
}
function getStyleNonce() {
  return getInternalRenderSource() === "worker" ? STYLE_NONCE_PLACEHOLDER : void 0;
}
var useIsServerRender = () => {
  const isBrowser = typeof window !== "undefined" && window.document && window.document.createElement;
  return !isBrowser;
};
var useIsServerOrFirstClientRender = () => {
  const isServerRender = useIsServerRender();
  const [hasRenderedOnClient, setHasRenderedOnClient] = useState(false);
  if (isServerRender) {
    return true;
  } else if (!hasRenderedOnClient) {
    Promise.resolve().then(() => setHasRenderedOnClient(true));
    return true;
  }
  return false;
};
var useIsAfterMount = () => {
  const [isMounted, setIsMounted] = useState(false);
  useEffect(() => {
    setIsMounted(true);
  }, []);
  return isMounted;
};
var useIsAfterMountWithoutForcingRerender = () => {
  const afterMountRef = useRef(false);
  useEffect(() => {
    afterMountRef.current = true;
  }, []);
  return afterMountRef.current;
};
var useAfterIslandHydration = () => {
  const isServerRender = useIsServerRender();
  if (isServerRender) {
    return false;
  }
  const clientRenderContext = useClientRenderContext();
  const clientOnly = clientRenderContext.island.clientOnly;
  const alreadyHydrated = clientRenderContext.hydrationFinished.current === true;
  const isPostMount = useIsAfterMount();
  return isPostMount || alreadyHydrated || clientOnly;
};
if (import.meta && __vite_import_meta_env__ && false) {
  new URL(window.location.href);
}
var useCurrentClientPageURL = (originalUrl, componentId) => {
  {
    return null;
  }
};
var useInitialPageUrl = () => {
  const renderContext = useRenderContext();
  if (!renderContext.pageUrl) {
    throw new Error("No pageUrl in render context");
  }
  const url = new URL(renderContext.pageUrl);
  return url;
};
var usePageUrl = () => {
  `${useId()}pageUrl`;
  const originalUrl = useInitialPageUrl();
  const currentClientURL = useCurrentClientPageURL();
  return currentClientURL ?? originalUrl;
};
var pushHistoryState = (data = {}, url) => {
  window.history.pushState(data, "", url);
  window.dispatchEvent(new Event("pushstate"));
};
var useBasePath = () => {
  const renderContext = useRenderContext();
  if (!renderContext.entryPointBasePath) {
    throw new Error("No basePath in render context");
  }
  return renderContext.entryPointBasePath;
};
var isDebugUrl = (url) => {
  if (!url) {
    return false;
  }
  const hsDebugParam = url.searchParams.get("hsDebug") || "";
  return hsDebugParam.toLowerCase() === "true";
};
var isDebugUrlString = (urlString) => {
  return isDebugUrl(new URL(urlString, "http://notreal.dev"));
};
var useIsDebug = () => {
  return isDebugUrl(useInitialPageUrl());
};
var logInfo = (...args) => {
  console.log(...args);
  {
    const serverContext = useServerRenderContext();
    serverContext.messagesForBrowser.push({ level: "info", parameters: args });
  }
};
var logWarn = (...args) => {
  console.warn(...args);
  {
    const serverContext = useServerRenderContext();
    serverContext.messagesForBrowser.push({ level: "warn", parameters: args });
  }
};
var logError = (...args) => {
  console.error(...args);
  {
    const serverContext = useServerRenderContext();
    serverContext.messagesForBrowser.push({ level: "error", parameters: args });
  }
};
var logInfoDebugOnly = (...args) => {
  if (useIsDebug()) {
    logInfo(...args);
  }
};
var logWarnDebugOnly = (...args) => {
  if (useIsDebug()) {
    logWarn(...args);
  }
};
var logErrorDebugOnly = (...args) => {
  if (useIsDebug()) {
    logError(...args);
  }
};
var ISO639CodeEnum = /* @__PURE__ */ ((ISO639CodeEnum2) => {
  ISO639CodeEnum2["AF"] = "af";
  ISO639CodeEnum2["AF_NA"] = "af-NA";
  ISO639CodeEnum2["AF_ZA"] = "af-ZA";
  ISO639CodeEnum2["AGQ"] = "agq";
  ISO639CodeEnum2["AGQ_CM"] = "agq-CM";
  ISO639CodeEnum2["AK"] = "ak";
  ISO639CodeEnum2["AK_GH"] = "ak-GH";
  ISO639CodeEnum2["AM"] = "am";
  ISO639CodeEnum2["AM_ET"] = "am-ET";
  ISO639CodeEnum2["ANN"] = "ann";
  ISO639CodeEnum2["ANN_NG"] = "ann-NG";
  ISO639CodeEnum2["AR"] = "ar";
  ISO639CodeEnum2["AR_001"] = "ar-001";
  ISO639CodeEnum2["AR_AE"] = "ar-AE";
  ISO639CodeEnum2["AR_BH"] = "ar-BH";
  ISO639CodeEnum2["AR_DJ"] = "ar-DJ";
  ISO639CodeEnum2["AR_DZ"] = "ar-DZ";
  ISO639CodeEnum2["AR_EG"] = "ar-EG";
  ISO639CodeEnum2["AR_EH"] = "ar-EH";
  ISO639CodeEnum2["AR_ER"] = "ar-ER";
  ISO639CodeEnum2["AR_IL"] = "ar-IL";
  ISO639CodeEnum2["AR_IQ"] = "ar-IQ";
  ISO639CodeEnum2["AR_JO"] = "ar-JO";
  ISO639CodeEnum2["AR_KM"] = "ar-KM";
  ISO639CodeEnum2["AR_KW"] = "ar-KW";
  ISO639CodeEnum2["AR_LB"] = "ar-LB";
  ISO639CodeEnum2["AR_LY"] = "ar-LY";
  ISO639CodeEnum2["AR_MA"] = "ar-MA";
  ISO639CodeEnum2["AR_MR"] = "ar-MR";
  ISO639CodeEnum2["AR_OM"] = "ar-OM";
  ISO639CodeEnum2["AR_PS"] = "ar-PS";
  ISO639CodeEnum2["AR_QA"] = "ar-QA";
  ISO639CodeEnum2["AR_SA"] = "ar-SA";
  ISO639CodeEnum2["AR_SD"] = "ar-SD";
  ISO639CodeEnum2["AR_SO"] = "ar-SO";
  ISO639CodeEnum2["AR_SS"] = "ar-SS";
  ISO639CodeEnum2["AR_SY"] = "ar-SY";
  ISO639CodeEnum2["AR_TD"] = "ar-TD";
  ISO639CodeEnum2["AR_TN"] = "ar-TN";
  ISO639CodeEnum2["AR_YE"] = "ar-YE";
  ISO639CodeEnum2["AS"] = "as";
  ISO639CodeEnum2["ASA"] = "asa";
  ISO639CodeEnum2["ASA_TZ"] = "asa-TZ";
  ISO639CodeEnum2["AST"] = "ast";
  ISO639CodeEnum2["AST_ES"] = "ast-ES";
  ISO639CodeEnum2["AS_IN"] = "as-IN";
  ISO639CodeEnum2["AZ"] = "az";
  ISO639CodeEnum2["AZ_AZ"] = "az-AZ";
  ISO639CodeEnum2["BAS"] = "bas";
  ISO639CodeEnum2["BAS_CM"] = "bas-CM";
  ISO639CodeEnum2["BE"] = "be";
  ISO639CodeEnum2["BEM"] = "bem";
  ISO639CodeEnum2["BEM_ZM"] = "bem-ZM";
  ISO639CodeEnum2["BEZ"] = "bez";
  ISO639CodeEnum2["BEZ_TZ"] = "bez-TZ";
  ISO639CodeEnum2["BE_BY"] = "be-BY";
  ISO639CodeEnum2["BG"] = "bg";
  ISO639CodeEnum2["BGC"] = "bgc";
  ISO639CodeEnum2["BGC_IN"] = "bgc-IN";
  ISO639CodeEnum2["BG_BG"] = "bg-BG";
  ISO639CodeEnum2["BHO"] = "bho";
  ISO639CodeEnum2["BHO_IN"] = "bho-IN";
  ISO639CodeEnum2["BM"] = "bm";
  ISO639CodeEnum2["BM_ML"] = "bm-ML";
  ISO639CodeEnum2["BN"] = "bn";
  ISO639CodeEnum2["BN_BD"] = "bn-BD";
  ISO639CodeEnum2["BN_IN"] = "bn-IN";
  ISO639CodeEnum2["BO"] = "bo";
  ISO639CodeEnum2["BO_CN"] = "bo-CN";
  ISO639CodeEnum2["BO_IN"] = "bo-IN";
  ISO639CodeEnum2["BR"] = "br";
  ISO639CodeEnum2["BRX"] = "brx";
  ISO639CodeEnum2["BRX_IN"] = "brx-IN";
  ISO639CodeEnum2["BR_FR"] = "br-FR";
  ISO639CodeEnum2["BS"] = "bs";
  ISO639CodeEnum2["BS_BA"] = "bs-BA";
  ISO639CodeEnum2["CA"] = "ca";
  ISO639CodeEnum2["CA_AD"] = "ca-AD";
  ISO639CodeEnum2["CA_ES"] = "ca-ES";
  ISO639CodeEnum2["CA_FR"] = "ca-FR";
  ISO639CodeEnum2["CA_IT"] = "ca-IT";
  ISO639CodeEnum2["CCP"] = "ccp";
  ISO639CodeEnum2["CCP_BD"] = "ccp-BD";
  ISO639CodeEnum2["CCP_IN"] = "ccp-IN";
  ISO639CodeEnum2["CE"] = "ce";
  ISO639CodeEnum2["CEB"] = "ceb";
  ISO639CodeEnum2["CEB_PH"] = "ceb-PH";
  ISO639CodeEnum2["CE_RU"] = "ce-RU";
  ISO639CodeEnum2["CGG"] = "cgg";
  ISO639CodeEnum2["CGG_UG"] = "cgg-UG";
  ISO639CodeEnum2["CHR"] = "chr";
  ISO639CodeEnum2["CHR_US"] = "chr-US";
  ISO639CodeEnum2["CKB"] = "ckb";
  ISO639CodeEnum2["CKB_IQ"] = "ckb-IQ";
  ISO639CodeEnum2["CKB_IR"] = "ckb-IR";
  ISO639CodeEnum2["CS"] = "cs";
  ISO639CodeEnum2["CS_CZ"] = "cs-CZ";
  ISO639CodeEnum2["CU"] = "cu";
  ISO639CodeEnum2["CU_RU"] = "cu-RU";
  ISO639CodeEnum2["CV"] = "cv";
  ISO639CodeEnum2["CV_RU"] = "cv-RU";
  ISO639CodeEnum2["CY"] = "cy";
  ISO639CodeEnum2["CY_GB"] = "cy-GB";
  ISO639CodeEnum2["DA"] = "da";
  ISO639CodeEnum2["DAV"] = "dav";
  ISO639CodeEnum2["DAV_KE"] = "dav-KE";
  ISO639CodeEnum2["DA_DK"] = "da-DK";
  ISO639CodeEnum2["DA_GL"] = "da-GL";
  ISO639CodeEnum2["DE"] = "de";
  ISO639CodeEnum2["DE_AT"] = "de-AT";
  ISO639CodeEnum2["DE_BE"] = "de-BE";
  ISO639CodeEnum2["DE_CH"] = "de-CH";
  ISO639CodeEnum2["DE_DE"] = "de-DE";
  ISO639CodeEnum2["DE_GR"] = "de-GR";
  ISO639CodeEnum2["DE_IT"] = "de-IT";
  ISO639CodeEnum2["DE_LI"] = "de-LI";
  ISO639CodeEnum2["DE_LU"] = "de-LU";
  ISO639CodeEnum2["DJE"] = "dje";
  ISO639CodeEnum2["DJE_NE"] = "dje-NE";
  ISO639CodeEnum2["DOI"] = "doi";
  ISO639CodeEnum2["DOI_IN"] = "doi-IN";
  ISO639CodeEnum2["DSB"] = "dsb";
  ISO639CodeEnum2["DSB_DE"] = "dsb-DE";
  ISO639CodeEnum2["DUA"] = "dua";
  ISO639CodeEnum2["DUA_CM"] = "dua-CM";
  ISO639CodeEnum2["DYO"] = "dyo";
  ISO639CodeEnum2["DYO_SN"] = "dyo-SN";
  ISO639CodeEnum2["DZ"] = "dz";
  ISO639CodeEnum2["DZ_BT"] = "dz-BT";
  ISO639CodeEnum2["EBU"] = "ebu";
  ISO639CodeEnum2["EBU_KE"] = "ebu-KE";
  ISO639CodeEnum2["EE"] = "ee";
  ISO639CodeEnum2["EE_GH"] = "ee-GH";
  ISO639CodeEnum2["EE_TG"] = "ee-TG";
  ISO639CodeEnum2["EL"] = "el";
  ISO639CodeEnum2["EL_CY"] = "el-CY";
  ISO639CodeEnum2["EL_GR"] = "el-GR";
  ISO639CodeEnum2["EN"] = "en";
  ISO639CodeEnum2["EN_001"] = "en-001";
  ISO639CodeEnum2["EN_150"] = "en-150";
  ISO639CodeEnum2["EN_AE"] = "en-AE";
  ISO639CodeEnum2["EN_AG"] = "en-AG";
  ISO639CodeEnum2["EN_AI"] = "en-AI";
  ISO639CodeEnum2["EN_AS"] = "en-AS";
  ISO639CodeEnum2["EN_AT"] = "en-AT";
  ISO639CodeEnum2["EN_AU"] = "en-AU";
  ISO639CodeEnum2["EN_BB"] = "en-BB";
  ISO639CodeEnum2["EN_BE"] = "en-BE";
  ISO639CodeEnum2["EN_BI"] = "en-BI";
  ISO639CodeEnum2["EN_BM"] = "en-BM";
  ISO639CodeEnum2["EN_BS"] = "en-BS";
  ISO639CodeEnum2["EN_BW"] = "en-BW";
  ISO639CodeEnum2["EN_BZ"] = "en-BZ";
  ISO639CodeEnum2["EN_CA"] = "en-CA";
  ISO639CodeEnum2["EN_CC"] = "en-CC";
  ISO639CodeEnum2["EN_CH"] = "en-CH";
  ISO639CodeEnum2["EN_CK"] = "en-CK";
  ISO639CodeEnum2["EN_CM"] = "en-CM";
  ISO639CodeEnum2["EN_CN"] = "en-CN";
  ISO639CodeEnum2["EN_CX"] = "en-CX";
  ISO639CodeEnum2["EN_CY"] = "en-CY";
  ISO639CodeEnum2["EN_DE"] = "en-DE";
  ISO639CodeEnum2["EN_DG"] = "en-DG";
  ISO639CodeEnum2["EN_DK"] = "en-DK";
  ISO639CodeEnum2["EN_DM"] = "en-DM";
  ISO639CodeEnum2["EN_EE"] = "en-EE";
  ISO639CodeEnum2["EN_ER"] = "en-ER";
  ISO639CodeEnum2["EN_FI"] = "en-FI";
  ISO639CodeEnum2["EN_FJ"] = "en-FJ";
  ISO639CodeEnum2["EN_FK"] = "en-FK";
  ISO639CodeEnum2["EN_FM"] = "en-FM";
  ISO639CodeEnum2["EN_FR"] = "en-FR";
  ISO639CodeEnum2["EN_GB"] = "en-GB";
  ISO639CodeEnum2["EN_GD"] = "en-GD";
  ISO639CodeEnum2["EN_GG"] = "en-GG";
  ISO639CodeEnum2["EN_GH"] = "en-GH";
  ISO639CodeEnum2["EN_GI"] = "en-GI";
  ISO639CodeEnum2["EN_GM"] = "en-GM";
  ISO639CodeEnum2["EN_GU"] = "en-GU";
  ISO639CodeEnum2["EN_GY"] = "en-GY";
  ISO639CodeEnum2["EN_HK"] = "en-HK";
  ISO639CodeEnum2["EN_IE"] = "en-IE";
  ISO639CodeEnum2["EN_IL"] = "en-IL";
  ISO639CodeEnum2["EN_IM"] = "en-IM";
  ISO639CodeEnum2["EN_IN"] = "en-IN";
  ISO639CodeEnum2["EN_IO"] = "en-IO";
  ISO639CodeEnum2["EN_JE"] = "en-JE";
  ISO639CodeEnum2["EN_JM"] = "en-JM";
  ISO639CodeEnum2["EN_KE"] = "en-KE";
  ISO639CodeEnum2["EN_KI"] = "en-KI";
  ISO639CodeEnum2["EN_KN"] = "en-KN";
  ISO639CodeEnum2["EN_KY"] = "en-KY";
  ISO639CodeEnum2["EN_LC"] = "en-LC";
  ISO639CodeEnum2["EN_LR"] = "en-LR";
  ISO639CodeEnum2["EN_LS"] = "en-LS";
  ISO639CodeEnum2["EN_LU"] = "en-LU";
  ISO639CodeEnum2["EN_MG"] = "en-MG";
  ISO639CodeEnum2["EN_MH"] = "en-MH";
  ISO639CodeEnum2["EN_MO"] = "en-MO";
  ISO639CodeEnum2["EN_MP"] = "en-MP";
  ISO639CodeEnum2["EN_MS"] = "en-MS";
  ISO639CodeEnum2["EN_MT"] = "en-MT";
  ISO639CodeEnum2["EN_MU"] = "en-MU";
  ISO639CodeEnum2["EN_MV"] = "en-MV";
  ISO639CodeEnum2["EN_MW"] = "en-MW";
  ISO639CodeEnum2["EN_MX"] = "en-MX";
  ISO639CodeEnum2["EN_MY"] = "en-MY";
  ISO639CodeEnum2["EN_NA"] = "en-NA";
  ISO639CodeEnum2["EN_NF"] = "en-NF";
  ISO639CodeEnum2["EN_NG"] = "en-NG";
  ISO639CodeEnum2["EN_NL"] = "en-NL";
  ISO639CodeEnum2["EN_NR"] = "en-NR";
  ISO639CodeEnum2["EN_NU"] = "en-NU";
  ISO639CodeEnum2["EN_NZ"] = "en-NZ";
  ISO639CodeEnum2["EN_PG"] = "en-PG";
  ISO639CodeEnum2["EN_PH"] = "en-PH";
  ISO639CodeEnum2["EN_PK"] = "en-PK";
  ISO639CodeEnum2["EN_PN"] = "en-PN";
  ISO639CodeEnum2["EN_PR"] = "en-PR";
  ISO639CodeEnum2["EN_PW"] = "en-PW";
  ISO639CodeEnum2["EN_RW"] = "en-RW";
  ISO639CodeEnum2["EN_SB"] = "en-SB";
  ISO639CodeEnum2["EN_SC"] = "en-SC";
  ISO639CodeEnum2["EN_SD"] = "en-SD";
  ISO639CodeEnum2["EN_SE"] = "en-SE";
  ISO639CodeEnum2["EN_SG"] = "en-SG";
  ISO639CodeEnum2["EN_SH"] = "en-SH";
  ISO639CodeEnum2["EN_SI"] = "en-SI";
  ISO639CodeEnum2["EN_SL"] = "en-SL";
  ISO639CodeEnum2["EN_SS"] = "en-SS";
  ISO639CodeEnum2["EN_SX"] = "en-SX";
  ISO639CodeEnum2["EN_SZ"] = "en-SZ";
  ISO639CodeEnum2["EN_TC"] = "en-TC";
  ISO639CodeEnum2["EN_TK"] = "en-TK";
  ISO639CodeEnum2["EN_TO"] = "en-TO";
  ISO639CodeEnum2["EN_TT"] = "en-TT";
  ISO639CodeEnum2["EN_TV"] = "en-TV";
  ISO639CodeEnum2["EN_TZ"] = "en-TZ";
  ISO639CodeEnum2["EN_UG"] = "en-UG";
  ISO639CodeEnum2["EN_UM"] = "en-UM";
  ISO639CodeEnum2["EN_US"] = "en-US";
  ISO639CodeEnum2["EN_VC"] = "en-VC";
  ISO639CodeEnum2["EN_VG"] = "en-VG";
  ISO639CodeEnum2["EN_VI"] = "en-VI";
  ISO639CodeEnum2["EN_VU"] = "en-VU";
  ISO639CodeEnum2["EN_WS"] = "en-WS";
  ISO639CodeEnum2["EN_ZA"] = "en-ZA";
  ISO639CodeEnum2["EN_ZM"] = "en-ZM";
  ISO639CodeEnum2["EN_ZW"] = "en-ZW";
  ISO639CodeEnum2["EO"] = "eo";
  ISO639CodeEnum2["EO_001"] = "eo-001";
  ISO639CodeEnum2["ES"] = "es";
  ISO639CodeEnum2["ES_419"] = "es-419";
  ISO639CodeEnum2["ES_AR"] = "es-AR";
  ISO639CodeEnum2["ES_BO"] = "es-BO";
  ISO639CodeEnum2["ES_BR"] = "es-BR";
  ISO639CodeEnum2["ES_BZ"] = "es-BZ";
  ISO639CodeEnum2["ES_CL"] = "es-CL";
  ISO639CodeEnum2["ES_CO"] = "es-CO";
  ISO639CodeEnum2["ES_CR"] = "es-CR";
  ISO639CodeEnum2["ES_CU"] = "es-CU";
  ISO639CodeEnum2["ES_DO"] = "es-DO";
  ISO639CodeEnum2["ES_EA"] = "es-EA";
  ISO639CodeEnum2["ES_EC"] = "es-EC";
  ISO639CodeEnum2["ES_ES"] = "es-ES";
  ISO639CodeEnum2["ES_GQ"] = "es-GQ";
  ISO639CodeEnum2["ES_GT"] = "es-GT";
  ISO639CodeEnum2["ES_HN"] = "es-HN";
  ISO639CodeEnum2["ES_IC"] = "es-IC";
  ISO639CodeEnum2["ES_MX"] = "es-MX";
  ISO639CodeEnum2["ES_NI"] = "es-NI";
  ISO639CodeEnum2["ES_PA"] = "es-PA";
  ISO639CodeEnum2["ES_PE"] = "es-PE";
  ISO639CodeEnum2["ES_PH"] = "es-PH";
  ISO639CodeEnum2["ES_PR"] = "es-PR";
  ISO639CodeEnum2["ES_PY"] = "es-PY";
  ISO639CodeEnum2["ES_SV"] = "es-SV";
  ISO639CodeEnum2["ES_US"] = "es-US";
  ISO639CodeEnum2["ES_UY"] = "es-UY";
  ISO639CodeEnum2["ES_VE"] = "es-VE";
  ISO639CodeEnum2["ET"] = "et";
  ISO639CodeEnum2["ET_EE"] = "et-EE";
  ISO639CodeEnum2["EU"] = "eu";
  ISO639CodeEnum2["EU_ES"] = "eu-ES";
  ISO639CodeEnum2["EWO"] = "ewo";
  ISO639CodeEnum2["EWO_CM"] = "ewo-CM";
  ISO639CodeEnum2["FA"] = "fa";
  ISO639CodeEnum2["FA_AF"] = "fa-AF";
  ISO639CodeEnum2["FA_IR"] = "fa-IR";
  ISO639CodeEnum2["FF"] = "ff";
  ISO639CodeEnum2["FF_BF"] = "ff-BF";
  ISO639CodeEnum2["FF_CM"] = "ff-CM";
  ISO639CodeEnum2["FF_GH"] = "ff-GH";
  ISO639CodeEnum2["FF_GM"] = "ff-GM";
  ISO639CodeEnum2["FF_GN"] = "ff-GN";
  ISO639CodeEnum2["FF_GW"] = "ff-GW";
  ISO639CodeEnum2["FF_LR"] = "ff-LR";
  ISO639CodeEnum2["FF_MR"] = "ff-MR";
  ISO639CodeEnum2["FF_NE"] = "ff-NE";
  ISO639CodeEnum2["FF_NG"] = "ff-NG";
  ISO639CodeEnum2["FF_SL"] = "ff-SL";
  ISO639CodeEnum2["FF_SN"] = "ff-SN";
  ISO639CodeEnum2["FI"] = "fi";
  ISO639CodeEnum2["FIL"] = "fil";
  ISO639CodeEnum2["FIL_PH"] = "fil-PH";
  ISO639CodeEnum2["FI_FI"] = "fi-FI";
  ISO639CodeEnum2["FO"] = "fo";
  ISO639CodeEnum2["FO_DK"] = "fo-DK";
  ISO639CodeEnum2["FO_FO"] = "fo-FO";
  ISO639CodeEnum2["FR"] = "fr";
  ISO639CodeEnum2["FRR"] = "frr";
  ISO639CodeEnum2["FRR_DE"] = "frr-DE";
  ISO639CodeEnum2["FR_BE"] = "fr-BE";
  ISO639CodeEnum2["FR_BF"] = "fr-BF";
  ISO639CodeEnum2["FR_BI"] = "fr-BI";
  ISO639CodeEnum2["FR_BJ"] = "fr-BJ";
  ISO639CodeEnum2["FR_BL"] = "fr-BL";
  ISO639CodeEnum2["FR_CA"] = "fr-CA";
  ISO639CodeEnum2["FR_CD"] = "fr-CD";
  ISO639CodeEnum2["FR_CF"] = "fr-CF";
  ISO639CodeEnum2["FR_CG"] = "fr-CG";
  ISO639CodeEnum2["FR_CH"] = "fr-CH";
  ISO639CodeEnum2["FR_CI"] = "fr-CI";
  ISO639CodeEnum2["FR_CM"] = "fr-CM";
  ISO639CodeEnum2["FR_DJ"] = "fr-DJ";
  ISO639CodeEnum2["FR_DZ"] = "fr-DZ";
  ISO639CodeEnum2["FR_FR"] = "fr-FR";
  ISO639CodeEnum2["FR_GA"] = "fr-GA";
  ISO639CodeEnum2["FR_GF"] = "fr-GF";
  ISO639CodeEnum2["FR_GN"] = "fr-GN";
  ISO639CodeEnum2["FR_GP"] = "fr-GP";
  ISO639CodeEnum2["FR_GQ"] = "fr-GQ";
  ISO639CodeEnum2["FR_HT"] = "fr-HT";
  ISO639CodeEnum2["FR_KM"] = "fr-KM";
  ISO639CodeEnum2["FR_LU"] = "fr-LU";
  ISO639CodeEnum2["FR_MA"] = "fr-MA";
  ISO639CodeEnum2["FR_MC"] = "fr-MC";
  ISO639CodeEnum2["FR_MF"] = "fr-MF";
  ISO639CodeEnum2["FR_MG"] = "fr-MG";
  ISO639CodeEnum2["FR_ML"] = "fr-ML";
  ISO639CodeEnum2["FR_MQ"] = "fr-MQ";
  ISO639CodeEnum2["FR_MR"] = "fr-MR";
  ISO639CodeEnum2["FR_MU"] = "fr-MU";
  ISO639CodeEnum2["FR_NC"] = "fr-NC";
  ISO639CodeEnum2["FR_NE"] = "fr-NE";
  ISO639CodeEnum2["FR_PF"] = "fr-PF";
  ISO639CodeEnum2["FR_PM"] = "fr-PM";
  ISO639CodeEnum2["FR_RE"] = "fr-RE";
  ISO639CodeEnum2["FR_RW"] = "fr-RW";
  ISO639CodeEnum2["FR_SC"] = "fr-SC";
  ISO639CodeEnum2["FR_SN"] = "fr-SN";
  ISO639CodeEnum2["FR_SY"] = "fr-SY";
  ISO639CodeEnum2["FR_TD"] = "fr-TD";
  ISO639CodeEnum2["FR_TG"] = "fr-TG";
  ISO639CodeEnum2["FR_TN"] = "fr-TN";
  ISO639CodeEnum2["FR_VU"] = "fr-VU";
  ISO639CodeEnum2["FR_WF"] = "fr-WF";
  ISO639CodeEnum2["FR_YT"] = "fr-YT";
  ISO639CodeEnum2["FUR"] = "fur";
  ISO639CodeEnum2["FUR_IT"] = "fur-IT";
  ISO639CodeEnum2["FY"] = "fy";
  ISO639CodeEnum2["FY_NL"] = "fy-NL";
  ISO639CodeEnum2["GA"] = "ga";
  ISO639CodeEnum2["GA_GB"] = "ga-GB";
  ISO639CodeEnum2["GA_IE"] = "ga-IE";
  ISO639CodeEnum2["GD"] = "gd";
  ISO639CodeEnum2["GD_GB"] = "gd-GB";
  ISO639CodeEnum2["GL"] = "gl";
  ISO639CodeEnum2["GL_ES"] = "gl-ES";
  ISO639CodeEnum2["GSW"] = "gsw";
  ISO639CodeEnum2["GSW_CH"] = "gsw-CH";
  ISO639CodeEnum2["GSW_FR"] = "gsw-FR";
  ISO639CodeEnum2["GSW_LI"] = "gsw-LI";
  ISO639CodeEnum2["GU"] = "gu";
  ISO639CodeEnum2["GUZ"] = "guz";
  ISO639CodeEnum2["GUZ_KE"] = "guz-KE";
  ISO639CodeEnum2["GU_IN"] = "gu-IN";
  ISO639CodeEnum2["GV"] = "gv";
  ISO639CodeEnum2["GV_IM"] = "gv-IM";
  ISO639CodeEnum2["HA"] = "ha";
  ISO639CodeEnum2["HAW"] = "haw";
  ISO639CodeEnum2["HAW_US"] = "haw-US";
  ISO639CodeEnum2["HA_GH"] = "ha-GH";
  ISO639CodeEnum2["HA_NE"] = "ha-NE";
  ISO639CodeEnum2["HA_NG"] = "ha-NG";
  ISO639CodeEnum2["HE"] = "he";
  ISO639CodeEnum2["HI"] = "hi";
  ISO639CodeEnum2["HI_IN"] = "hi-IN";
  ISO639CodeEnum2["HR"] = "hr";
  ISO639CodeEnum2["HR_BA"] = "hr-BA";
  ISO639CodeEnum2["HR_HR"] = "hr-HR";
  ISO639CodeEnum2["HSB"] = "hsb";
  ISO639CodeEnum2["HSB_DE"] = "hsb-DE";
  ISO639CodeEnum2["HU"] = "hu";
  ISO639CodeEnum2["HU_HU"] = "hu-HU";
  ISO639CodeEnum2["HY"] = "hy";
  ISO639CodeEnum2["HY_AM"] = "hy-AM";
  ISO639CodeEnum2["IA"] = "ia";
  ISO639CodeEnum2["IA_001"] = "ia-001";
  ISO639CodeEnum2["ID"] = "id";
  ISO639CodeEnum2["IG"] = "ig";
  ISO639CodeEnum2["IG_NG"] = "ig-NG";
  ISO639CodeEnum2["II"] = "ii";
  ISO639CodeEnum2["II_CN"] = "ii-CN";
  ISO639CodeEnum2["IN_ID"] = "in-ID";
  ISO639CodeEnum2["IS"] = "is";
  ISO639CodeEnum2["IS_IS"] = "is-IS";
  ISO639CodeEnum2["IT"] = "it";
  ISO639CodeEnum2["IT_CH"] = "it-CH";
  ISO639CodeEnum2["IT_IT"] = "it-IT";
  ISO639CodeEnum2["IT_SM"] = "it-SM";
  ISO639CodeEnum2["IT_VA"] = "it-VA";
  ISO639CodeEnum2["IW_IL"] = "iw-IL";
  ISO639CodeEnum2["JA"] = "ja";
  ISO639CodeEnum2["JA_JP"] = "ja-JP";
  ISO639CodeEnum2["JGO"] = "jgo";
  ISO639CodeEnum2["JGO_CM"] = "jgo-CM";
  ISO639CodeEnum2["JI"] = "ji";
  ISO639CodeEnum2["JI_001"] = "ji-001";
  ISO639CodeEnum2["JMC"] = "jmc";
  ISO639CodeEnum2["JMC_TZ"] = "jmc-TZ";
  ISO639CodeEnum2["JV"] = "jv";
  ISO639CodeEnum2["JV_ID"] = "jv-ID";
  ISO639CodeEnum2["KA"] = "ka";
  ISO639CodeEnum2["KAB"] = "kab";
  ISO639CodeEnum2["KAB_DZ"] = "kab-DZ";
  ISO639CodeEnum2["KAM"] = "kam";
  ISO639CodeEnum2["KAM_KE"] = "kam-KE";
  ISO639CodeEnum2["KA_GE"] = "ka-GE";
  ISO639CodeEnum2["KDE"] = "kde";
  ISO639CodeEnum2["KDE_TZ"] = "kde-TZ";
  ISO639CodeEnum2["KEA"] = "kea";
  ISO639CodeEnum2["KEA_CV"] = "kea-CV";
  ISO639CodeEnum2["KGP"] = "kgp";
  ISO639CodeEnum2["KGP_BR"] = "kgp-BR";
  ISO639CodeEnum2["KHQ"] = "khq";
  ISO639CodeEnum2["KHQ_ML"] = "khq-ML";
  ISO639CodeEnum2["KI"] = "ki";
  ISO639CodeEnum2["KI_KE"] = "ki-KE";
  ISO639CodeEnum2["KK"] = "kk";
  ISO639CodeEnum2["KKJ"] = "kkj";
  ISO639CodeEnum2["KKJ_CM"] = "kkj-CM";
  ISO639CodeEnum2["KK_KZ"] = "kk-KZ";
  ISO639CodeEnum2["KL"] = "kl";
  ISO639CodeEnum2["KLN"] = "kln";
  ISO639CodeEnum2["KLN_KE"] = "kln-KE";
  ISO639CodeEnum2["KL_GL"] = "kl-GL";
  ISO639CodeEnum2["KM"] = "km";
  ISO639CodeEnum2["KM_KH"] = "km-KH";
  ISO639CodeEnum2["KN"] = "kn";
  ISO639CodeEnum2["KN_IN"] = "kn-IN";
  ISO639CodeEnum2["KO"] = "ko";
  ISO639CodeEnum2["KOK"] = "kok";
  ISO639CodeEnum2["KOK_IN"] = "kok-IN";
  ISO639CodeEnum2["KO_KP"] = "ko-KP";
  ISO639CodeEnum2["KO_KR"] = "ko-KR";
  ISO639CodeEnum2["KS"] = "ks";
  ISO639CodeEnum2["KSB"] = "ksb";
  ISO639CodeEnum2["KSB_TZ"] = "ksb-TZ";
  ISO639CodeEnum2["KSF"] = "ksf";
  ISO639CodeEnum2["KSF_CM"] = "ksf-CM";
  ISO639CodeEnum2["KSH"] = "ksh";
  ISO639CodeEnum2["KSH_DE"] = "ksh-DE";
  ISO639CodeEnum2["KS_IN"] = "ks-IN";
  ISO639CodeEnum2["KU"] = "ku";
  ISO639CodeEnum2["KU_TR"] = "ku-TR";
  ISO639CodeEnum2["KW"] = "kw";
  ISO639CodeEnum2["KW_GB"] = "kw-GB";
  ISO639CodeEnum2["KY"] = "ky";
  ISO639CodeEnum2["KY_KG"] = "ky-KG";
  ISO639CodeEnum2["LAG"] = "lag";
  ISO639CodeEnum2["LAG_TZ"] = "lag-TZ";
  ISO639CodeEnum2["LB"] = "lb";
  ISO639CodeEnum2["LB_LU"] = "lb-LU";
  ISO639CodeEnum2["LG"] = "lg";
  ISO639CodeEnum2["LG_UG"] = "lg-UG";
  ISO639CodeEnum2["LKT"] = "lkt";
  ISO639CodeEnum2["LKT_US"] = "lkt-US";
  ISO639CodeEnum2["LN"] = "ln";
  ISO639CodeEnum2["LN_AO"] = "ln-AO";
  ISO639CodeEnum2["LN_CD"] = "ln-CD";
  ISO639CodeEnum2["LN_CF"] = "ln-CF";
  ISO639CodeEnum2["LN_CG"] = "ln-CG";
  ISO639CodeEnum2["LO"] = "lo";
  ISO639CodeEnum2["LO_LA"] = "lo-LA";
  ISO639CodeEnum2["LRC"] = "lrc";
  ISO639CodeEnum2["LRC_IQ"] = "lrc-IQ";
  ISO639CodeEnum2["LRC_IR"] = "lrc-IR";
  ISO639CodeEnum2["LT"] = "lt";
  ISO639CodeEnum2["LT_LT"] = "lt-LT";
  ISO639CodeEnum2["LU"] = "lu";
  ISO639CodeEnum2["LUO"] = "luo";
  ISO639CodeEnum2["LUO_KE"] = "luo-KE";
  ISO639CodeEnum2["LUY"] = "luy";
  ISO639CodeEnum2["LUY_KE"] = "luy-KE";
  ISO639CodeEnum2["LU_CD"] = "lu-CD";
  ISO639CodeEnum2["LV"] = "lv";
  ISO639CodeEnum2["LV_LV"] = "lv-LV";
  ISO639CodeEnum2["MAI"] = "mai";
  ISO639CodeEnum2["MAI_IN"] = "mai-IN";
  ISO639CodeEnum2["MAS"] = "mas";
  ISO639CodeEnum2["MAS_KE"] = "mas-KE";
  ISO639CodeEnum2["MAS_TZ"] = "mas-TZ";
  ISO639CodeEnum2["MDF"] = "mdf";
  ISO639CodeEnum2["MDF_RU"] = "mdf-RU";
  ISO639CodeEnum2["MER"] = "mer";
  ISO639CodeEnum2["MER_KE"] = "mer-KE";
  ISO639CodeEnum2["MFE"] = "mfe";
  ISO639CodeEnum2["MFE_MU"] = "mfe-MU";
  ISO639CodeEnum2["MG"] = "mg";
  ISO639CodeEnum2["MGH"] = "mgh";
  ISO639CodeEnum2["MGH_MZ"] = "mgh-MZ";
  ISO639CodeEnum2["MGO"] = "mgo";
  ISO639CodeEnum2["MGO_CM"] = "mgo-CM";
  ISO639CodeEnum2["MG_MG"] = "mg-MG";
  ISO639CodeEnum2["MI"] = "mi";
  ISO639CodeEnum2["MI_NZ"] = "mi-NZ";
  ISO639CodeEnum2["MK"] = "mk";
  ISO639CodeEnum2["MK_MK"] = "mk-MK";
  ISO639CodeEnum2["ML"] = "ml";
  ISO639CodeEnum2["ML_IN"] = "ml-IN";
  ISO639CodeEnum2["MN"] = "mn";
  ISO639CodeEnum2["MNI"] = "mni";
  ISO639CodeEnum2["MNI_IN"] = "mni-IN";
  ISO639CodeEnum2["MN_MN"] = "mn-MN";
  ISO639CodeEnum2["MR"] = "mr";
  ISO639CodeEnum2["MR_IN"] = "mr-IN";
  ISO639CodeEnum2["MS"] = "ms";
  ISO639CodeEnum2["MS_BN"] = "ms-BN";
  ISO639CodeEnum2["MS_ID"] = "ms-ID";
  ISO639CodeEnum2["MS_MY"] = "ms-MY";
  ISO639CodeEnum2["MS_SG"] = "ms-SG";
  ISO639CodeEnum2["MT"] = "mt";
  ISO639CodeEnum2["MT_MT"] = "mt-MT";
  ISO639CodeEnum2["MUA"] = "mua";
  ISO639CodeEnum2["MUA_CM"] = "mua-CM";
  ISO639CodeEnum2["MY"] = "my";
  ISO639CodeEnum2["MY_MM"] = "my-MM";
  ISO639CodeEnum2["MZN"] = "mzn";
  ISO639CodeEnum2["MZN_IR"] = "mzn-IR";
  ISO639CodeEnum2["NAQ"] = "naq";
  ISO639CodeEnum2["NAQ_NA"] = "naq-NA";
  ISO639CodeEnum2["NB"] = "nb";
  ISO639CodeEnum2["NB_NO"] = "nb-NO";
  ISO639CodeEnum2["NB_SJ"] = "nb-SJ";
  ISO639CodeEnum2["ND"] = "nd";
  ISO639CodeEnum2["NDS"] = "nds";
  ISO639CodeEnum2["NDS_DE"] = "nds-DE";
  ISO639CodeEnum2["NDS_NL"] = "nds-NL";
  ISO639CodeEnum2["ND_ZW"] = "nd-ZW";
  ISO639CodeEnum2["NE"] = "ne";
  ISO639CodeEnum2["NE_IN"] = "ne-IN";
  ISO639CodeEnum2["NE_NP"] = "ne-NP";
  ISO639CodeEnum2["NL"] = "nl";
  ISO639CodeEnum2["NL_AW"] = "nl-AW";
  ISO639CodeEnum2["NL_BE"] = "nl-BE";
  ISO639CodeEnum2["NL_BQ"] = "nl-BQ";
  ISO639CodeEnum2["NL_CH"] = "nl-CH";
  ISO639CodeEnum2["NL_CW"] = "nl-CW";
  ISO639CodeEnum2["NL_LU"] = "nl-LU";
  ISO639CodeEnum2["NL_NL"] = "nl-NL";
  ISO639CodeEnum2["NL_SR"] = "nl-SR";
  ISO639CodeEnum2["NL_SX"] = "nl-SX";
  ISO639CodeEnum2["NMG"] = "nmg";
  ISO639CodeEnum2["NMG_CM"] = "nmg-CM";
  ISO639CodeEnum2["NN"] = "nn";
  ISO639CodeEnum2["NNH"] = "nnh";
  ISO639CodeEnum2["NNH_CM"] = "nnh-CM";
  ISO639CodeEnum2["NN_NO"] = "nn-NO";
  ISO639CodeEnum2["NO"] = "no";
  ISO639CodeEnum2["NO_NO"] = "no-NO";
  ISO639CodeEnum2["NUS"] = "nus";
  ISO639CodeEnum2["NUS_SS"] = "nus-SS";
  ISO639CodeEnum2["NYN"] = "nyn";
  ISO639CodeEnum2["NYN_UG"] = "nyn-UG";
  ISO639CodeEnum2["OC"] = "oc";
  ISO639CodeEnum2["OC_ES"] = "oc-ES";
  ISO639CodeEnum2["OC_FR"] = "oc-FR";
  ISO639CodeEnum2["OM"] = "om";
  ISO639CodeEnum2["OM_ET"] = "om-ET";
  ISO639CodeEnum2["OM_KE"] = "om-KE";
  ISO639CodeEnum2["OR"] = "or";
  ISO639CodeEnum2["OR_IN"] = "or-IN";
  ISO639CodeEnum2["OS"] = "os";
  ISO639CodeEnum2["OS_GE"] = "os-GE";
  ISO639CodeEnum2["OS_RU"] = "os-RU";
  ISO639CodeEnum2["PA"] = "pa";
  ISO639CodeEnum2["PA_IN"] = "pa-IN";
  ISO639CodeEnum2["PA_PK"] = "pa-PK";
  ISO639CodeEnum2["PCM"] = "pcm";
  ISO639CodeEnum2["PCM_NG"] = "pcm-NG";
  ISO639CodeEnum2["PIS"] = "pis";
  ISO639CodeEnum2["PIS_SB"] = "pis-SB";
  ISO639CodeEnum2["PL"] = "pl";
  ISO639CodeEnum2["PL_PL"] = "pl-PL";
  ISO639CodeEnum2["PRG"] = "prg";
  ISO639CodeEnum2["PRG_001"] = "prg-001";
  ISO639CodeEnum2["PS"] = "ps";
  ISO639CodeEnum2["PS_AF"] = "ps-AF";
  ISO639CodeEnum2["PS_PK"] = "ps-PK";
  ISO639CodeEnum2["PT"] = "pt";
  ISO639CodeEnum2["PT_AO"] = "pt-AO";
  ISO639CodeEnum2["PT_BR"] = "pt-BR";
  ISO639CodeEnum2["PT_CH"] = "pt-CH";
  ISO639CodeEnum2["PT_CV"] = "pt-CV";
  ISO639CodeEnum2["PT_GQ"] = "pt-GQ";
  ISO639CodeEnum2["PT_GW"] = "pt-GW";
  ISO639CodeEnum2["PT_LU"] = "pt-LU";
  ISO639CodeEnum2["PT_MO"] = "pt-MO";
  ISO639CodeEnum2["PT_MZ"] = "pt-MZ";
  ISO639CodeEnum2["PT_PT"] = "pt-PT";
  ISO639CodeEnum2["PT_ST"] = "pt-ST";
  ISO639CodeEnum2["PT_TL"] = "pt-TL";
  ISO639CodeEnum2["QU"] = "qu";
  ISO639CodeEnum2["QU_BO"] = "qu-BO";
  ISO639CodeEnum2["QU_EC"] = "qu-EC";
  ISO639CodeEnum2["QU_PE"] = "qu-PE";
  ISO639CodeEnum2["RAJ"] = "raj";
  ISO639CodeEnum2["RAJ_IN"] = "raj-IN";
  ISO639CodeEnum2["RM"] = "rm";
  ISO639CodeEnum2["RM_CH"] = "rm-CH";
  ISO639CodeEnum2["RN"] = "rn";
  ISO639CodeEnum2["RN_BI"] = "rn-BI";
  ISO639CodeEnum2["RO"] = "ro";
  ISO639CodeEnum2["ROF"] = "rof";
  ISO639CodeEnum2["ROF_TZ"] = "rof-TZ";
  ISO639CodeEnum2["RO_MD"] = "ro-MD";
  ISO639CodeEnum2["RO_RO"] = "ro-RO";
  ISO639CodeEnum2["RU"] = "ru";
  ISO639CodeEnum2["RU_BY"] = "ru-BY";
  ISO639CodeEnum2["RU_KG"] = "ru-KG";
  ISO639CodeEnum2["RU_KZ"] = "ru-KZ";
  ISO639CodeEnum2["RU_MD"] = "ru-MD";
  ISO639CodeEnum2["RU_RU"] = "ru-RU";
  ISO639CodeEnum2["RU_UA"] = "ru-UA";
  ISO639CodeEnum2["RW"] = "rw";
  ISO639CodeEnum2["RWK"] = "rwk";
  ISO639CodeEnum2["RWK_TZ"] = "rwk-TZ";
  ISO639CodeEnum2["RW_RW"] = "rw-RW";
  ISO639CodeEnum2["SA"] = "sa";
  ISO639CodeEnum2["SAH"] = "sah";
  ISO639CodeEnum2["SAH_RU"] = "sah-RU";
  ISO639CodeEnum2["SAQ"] = "saq";
  ISO639CodeEnum2["SAQ_KE"] = "saq-KE";
  ISO639CodeEnum2["SAT"] = "sat";
  ISO639CodeEnum2["SAT_IN"] = "sat-IN";
  ISO639CodeEnum2["SA_IN"] = "sa-IN";
  ISO639CodeEnum2["SBP"] = "sbp";
  ISO639CodeEnum2["SBP_TZ"] = "sbp-TZ";
  ISO639CodeEnum2["SC"] = "sc";
  ISO639CodeEnum2["SC_IT"] = "sc-IT";
  ISO639CodeEnum2["SD"] = "sd";
  ISO639CodeEnum2["SD_IN"] = "sd-IN";
  ISO639CodeEnum2["SD_PK"] = "sd-PK";
  ISO639CodeEnum2["SE"] = "se";
  ISO639CodeEnum2["SEH"] = "seh";
  ISO639CodeEnum2["SEH_MZ"] = "seh-MZ";
  ISO639CodeEnum2["SES"] = "ses";
  ISO639CodeEnum2["SES_ML"] = "ses-ML";
  ISO639CodeEnum2["SE_FI"] = "se-FI";
  ISO639CodeEnum2["SE_NO"] = "se-NO";
  ISO639CodeEnum2["SE_SE"] = "se-SE";
  ISO639CodeEnum2["SG"] = "sg";
  ISO639CodeEnum2["SG_CF"] = "sg-CF";
  ISO639CodeEnum2["SHI"] = "shi";
  ISO639CodeEnum2["SHI_MA"] = "shi-MA";
  ISO639CodeEnum2["SI"] = "si";
  ISO639CodeEnum2["SI_LK"] = "si-LK";
  ISO639CodeEnum2["SK"] = "sk";
  ISO639CodeEnum2["SK_SK"] = "sk-SK";
  ISO639CodeEnum2["SL"] = "sl";
  ISO639CodeEnum2["SL_SI"] = "sl-SI";
  ISO639CodeEnum2["SMN"] = "smn";
  ISO639CodeEnum2["SMN_FI"] = "smn-FI";
  ISO639CodeEnum2["SMS"] = "sms";
  ISO639CodeEnum2["SMS_FI"] = "sms-FI";
  ISO639CodeEnum2["SN"] = "sn";
  ISO639CodeEnum2["SN_ZW"] = "sn-ZW";
  ISO639CodeEnum2["SO"] = "so";
  ISO639CodeEnum2["SO_DJ"] = "so-DJ";
  ISO639CodeEnum2["SO_ET"] = "so-ET";
  ISO639CodeEnum2["SO_KE"] = "so-KE";
  ISO639CodeEnum2["SO_SO"] = "so-SO";
  ISO639CodeEnum2["SQ"] = "sq";
  ISO639CodeEnum2["SQ_AL"] = "sq-AL";
  ISO639CodeEnum2["SQ_MK"] = "sq-MK";
  ISO639CodeEnum2["SQ_XK"] = "sq-XK";
  ISO639CodeEnum2["SR"] = "sr";
  ISO639CodeEnum2["SR_BA"] = "sr-BA";
  ISO639CodeEnum2["SR_CS"] = "sr-CS";
  ISO639CodeEnum2["SR_ME"] = "sr-ME";
  ISO639CodeEnum2["SR_RS"] = "sr-RS";
  ISO639CodeEnum2["SR_XK"] = "sr-XK";
  ISO639CodeEnum2["SU"] = "su";
  ISO639CodeEnum2["SU_ID"] = "su-ID";
  ISO639CodeEnum2["SV"] = "sv";
  ISO639CodeEnum2["SV_AX"] = "sv-AX";
  ISO639CodeEnum2["SV_FI"] = "sv-FI";
  ISO639CodeEnum2["SV_SE"] = "sv-SE";
  ISO639CodeEnum2["SW"] = "sw";
  ISO639CodeEnum2["SW_CD"] = "sw-CD";
  ISO639CodeEnum2["SW_KE"] = "sw-KE";
  ISO639CodeEnum2["SW_TZ"] = "sw-TZ";
  ISO639CodeEnum2["SW_UG"] = "sw-UG";
  ISO639CodeEnum2["SY"] = "sy";
  ISO639CodeEnum2["TA"] = "ta";
  ISO639CodeEnum2["TA_IN"] = "ta-IN";
  ISO639CodeEnum2["TA_LK"] = "ta-LK";
  ISO639CodeEnum2["TA_MY"] = "ta-MY";
  ISO639CodeEnum2["TA_SG"] = "ta-SG";
  ISO639CodeEnum2["TE"] = "te";
  ISO639CodeEnum2["TEO"] = "teo";
  ISO639CodeEnum2["TEO_KE"] = "teo-KE";
  ISO639CodeEnum2["TEO_UG"] = "teo-UG";
  ISO639CodeEnum2["TE_IN"] = "te-IN";
  ISO639CodeEnum2["TG"] = "tg";
  ISO639CodeEnum2["TG_TJ"] = "tg-TJ";
  ISO639CodeEnum2["TH"] = "th";
  ISO639CodeEnum2["TH_TH"] = "th-TH";
  ISO639CodeEnum2["TI"] = "ti";
  ISO639CodeEnum2["TI_ER"] = "ti-ER";
  ISO639CodeEnum2["TI_ET"] = "ti-ET";
  ISO639CodeEnum2["TK"] = "tk";
  ISO639CodeEnum2["TK_TM"] = "tk-TM";
  ISO639CodeEnum2["TL"] = "tl";
  ISO639CodeEnum2["TO"] = "to";
  ISO639CodeEnum2["TOK"] = "tok";
  ISO639CodeEnum2["TOK_001"] = "tok-001";
  ISO639CodeEnum2["TO_TO"] = "to-TO";
  ISO639CodeEnum2["TR"] = "tr";
  ISO639CodeEnum2["TR_CY"] = "tr-CY";
  ISO639CodeEnum2["TR_TR"] = "tr-TR";
  ISO639CodeEnum2["TT"] = "tt";
  ISO639CodeEnum2["TT_RU"] = "tt-RU";
  ISO639CodeEnum2["TWQ"] = "twq";
  ISO639CodeEnum2["TWQ_NE"] = "twq-NE";
  ISO639CodeEnum2["TZM"] = "tzm";
  ISO639CodeEnum2["TZM_MA"] = "tzm-MA";
  ISO639CodeEnum2["UG"] = "ug";
  ISO639CodeEnum2["UG_CN"] = "ug-CN";
  ISO639CodeEnum2["UK"] = "uk";
  ISO639CodeEnum2["UK_UA"] = "uk-UA";
  ISO639CodeEnum2["UR"] = "ur";
  ISO639CodeEnum2["UR_IN"] = "ur-IN";
  ISO639CodeEnum2["UR_PK"] = "ur-PK";
  ISO639CodeEnum2["UZ"] = "uz";
  ISO639CodeEnum2["UZ_AF"] = "uz-AF";
  ISO639CodeEnum2["UZ_UZ"] = "uz-UZ";
  ISO639CodeEnum2["VAI"] = "vai";
  ISO639CodeEnum2["VAI_LR"] = "vai-LR";
  ISO639CodeEnum2["VI"] = "vi";
  ISO639CodeEnum2["VI_VN"] = "vi-VN";
  ISO639CodeEnum2["VO"] = "vo";
  ISO639CodeEnum2["VO_001"] = "vo-001";
  ISO639CodeEnum2["VUN"] = "vun";
  ISO639CodeEnum2["VUN_TZ"] = "vun-TZ";
  ISO639CodeEnum2["WAE"] = "wae";
  ISO639CodeEnum2["WAE_CH"] = "wae-CH";
  ISO639CodeEnum2["WO"] = "wo";
  ISO639CodeEnum2["WO_SN"] = "wo-SN";
  ISO639CodeEnum2["XH"] = "xh";
  ISO639CodeEnum2["XH_ZA"] = "xh-ZA";
  ISO639CodeEnum2["XOG"] = "xog";
  ISO639CodeEnum2["XOG_UG"] = "xog-UG";
  ISO639CodeEnum2["YAV"] = "yav";
  ISO639CodeEnum2["YAV_CM"] = "yav-CM";
  ISO639CodeEnum2["YO"] = "yo";
  ISO639CodeEnum2["YO_BJ"] = "yo-BJ";
  ISO639CodeEnum2["YO_NG"] = "yo-NG";
  ISO639CodeEnum2["YRL"] = "yrl";
  ISO639CodeEnum2["YRL_BR"] = "yrl-BR";
  ISO639CodeEnum2["YRL_CO"] = "yrl-CO";
  ISO639CodeEnum2["YRL_VE"] = "yrl-VE";
  ISO639CodeEnum2["YUE"] = "yue";
  ISO639CodeEnum2["YUE_CN"] = "yue-CN";
  ISO639CodeEnum2["YUE_HK"] = "yue-HK";
  ISO639CodeEnum2["ZGH"] = "zgh";
  ISO639CodeEnum2["ZGH_MA"] = "zgh-MA";
  ISO639CodeEnum2["ZH"] = "zh";
  ISO639CodeEnum2["ZH_CN"] = "zh-CN";
  ISO639CodeEnum2["ZH_HANS"] = "zh-Hans";
  ISO639CodeEnum2["ZH_HANT"] = "zh-Hant";
  ISO639CodeEnum2["ZH_HK"] = "zh-HK";
  ISO639CodeEnum2["ZH_MO"] = "zh-MO";
  ISO639CodeEnum2["ZH_SG"] = "zh-SG";
  ISO639CodeEnum2["ZH_TW"] = "zh-TW";
  ISO639CodeEnum2["ZU"] = "zu";
  ISO639CodeEnum2["ZU_ZA"] = "zu-ZA";
  return ISO639CodeEnum2;
})(ISO639CodeEnum || {});
function useAvailableTranslations() {
  var _a;
  const renderContext = useRenderContext();
  const availableTranslationsResult = (_a = renderContext.resolvedDataDependencies) == null ? void 0 : _a.availableTranslations;
  if ((availableTranslationsResult == null ? void 0 : availableTranslationsResult.type) === "success") {
    return availableTranslationsResult.data;
  }
  if ((availableTranslationsResult == null ? void 0 : availableTranslationsResult.type) === "error") {
    const errorMessage = availableTranslationsResult.error;
    logWarn(errorMessage);
  }
  return {};
}
function useLanguageVariants() {
  var _a;
  const renderContext = useRenderContext();
  const languageVariantsResult = (_a = renderContext.resolvedDataDependencies) == null ? void 0 : _a.languageVariants;
  if ((languageVariantsResult == null ? void 0 : languageVariantsResult.status) === "SUCCESS") {
    return languageVariantsResult.data;
  }
  if ((languageVariantsResult == null ? void 0 : languageVariantsResult.status) === "ERROR") {
    logError(languageVariantsResult.error);
  }
  if ((languageVariantsResult == null ? void 0 : languageVariantsResult.status) === "WARNING") {
    logWarn(languageVariantsResult.warning);
  }
  return [];
}
function unstable_useVideos(resolvableIds) {
  var _a;
  const renderContext = useRenderContext();
  const uniqueId = `${resolvableIds.type}:${resolvableIds.value}`;
  if (!((_a = renderContext.resolvedDataDependencies) == null ? void 0 : _a.videos)) {
    return [];
  }
  const videoDependencies = renderContext.resolvedDataDependencies.videos;
  const videoDependency = videoDependencies.dependencies[uniqueId];
  if (!videoDependency) {
    return null;
  }
  if (videoDependency.status === "success") {
    const videos = videoDependency.ids.map(
      (videoId) => videoDependencies.data[videoId]
    );
    return videos;
  }
  if (videoDependency.status === "error") {
    logWarn(videoDependency.error);
    return [];
  }
  return [];
}
function unstable_usePodcastShows(resolvableIds) {
  var _a;
  const renderContext = useRenderContext();
  const uniqueId = `${resolvableIds.type}:${resolvableIds.value}`;
  if (!((_a = renderContext.resolvedDataDependencies) == null ? void 0 : _a.podcastShows)) {
    return [];
  }
  const podcastShowDependencies = renderContext.resolvedDataDependencies.podcastShows;
  const podcastDependency = podcastShowDependencies.dependencies[uniqueId];
  if (!podcastDependency)
    return null;
  if (podcastDependency.status === "success") {
    const shows = podcastDependency.ids.map(
      (showId) => podcastShowDependencies.data[showId]
    );
    return shows;
  }
  if (podcastDependency.status === "error") {
    logWarn(podcastDependency.error);
    return [];
  }
  return [];
}
function unstable_usePodcastEpisodes(resolvableIds) {
  var _a;
  const renderContext = useRenderContext();
  const resolvedIdType = resolvableIds.type === "id" ? "ID" : "FIELD_PATH";
  const uniqueId = `${resolvedIdType}:${resolvableIds.value}`;
  if (!((_a = renderContext.resolvedDataDependencies) == null ? void 0 : _a.podcastEpisodes)) {
    return [];
  }
  const podcastEpisodeDependencies = renderContext.resolvedDataDependencies.podcastEpisodes;
  const podcastDependency = podcastEpisodeDependencies.dependencies[uniqueId];
  if (!podcastDependency)
    return null;
  if (podcastDependency.status === "success") {
    const episodes = podcastDependency.ids.map(
      (episodeId) => podcastEpisodeDependencies.data[episodeId]
    );
    return episodes;
  }
  if (podcastDependency.status === "error") {
    logWarn(podcastDependency.error);
    return [];
  }
  return [];
}
function id(value) {
  return { type: "id", value };
}
function fieldPath(value) {
  return { type: "fieldPath", value };
}
var stateUpdaterForReducer = (prevState, newValOrFunc) => {
  if (typeof newValOrFunc === "function") {
    return newValOrFunc(prevState);
  }
  return newValOrFunc;
};
function SharedIslandState({
  children,
  value,
  id: id2
}) {
  return /* @__PURE__ */ jsx(
    SharedIslandReducer,
    {
      id: id2,
      value,
      customReducerFunc: stateUpdaterForReducer,
      children
    }
  );
}
function useSharedIslandState() {
  return useSharedIslandReducerInternal();
}
var secretMap;
function setSecrets(secrets) {
  secretMap = secrets;
}
function setSecretsFromEnv(secretNames) {
  const secretEntries = secretNames.map((name) => [name, __vite_import_meta_env__[`HS_${name}`]]).filter(([__name, value]) => value !== void 0);
  setSecrets(new Map(secretEntries));
}
function getSecret(secretName) {
  if (!secretMap) {
    throw new Error("Secrets haven't been initialized");
  }
  if (!secretMap.has(secretName)) {
    throw new Error(
      `Secret ${secretName} isn't available in this context, make sure to include it in your cms-assets.json configuration and add it using \`hs secrets add\``
    );
  }
  return secretMap.get(secretName);
}
var DEFAULT_TAG = "div";
function RichTextFieldWrapper({
  fieldValue,
  tag: WrapperElement = DEFAULT_TAG,
  ...otherHTMLAttributes
}) {
  if (otherHTMLAttributes.children) {
    throw new Error(
      "Cannot pass children to RichTextFieldWrapper, only HTML field type values via `fieldValue"
    );
  }
  return /* @__PURE__ */ jsx(
    WrapperElement,
    {
      dangerouslySetInnerHTML: { __html: fieldValue },
      ...otherHTMLAttributes
    }
  );
}
var isObject = (value) => {
  const type = typeof value;
  return value !== null && (type === "object" || type === "function");
};
var disallowedKeys = /* @__PURE__ */ new Set([
  "__proto__",
  "prototype",
  "constructor"
]);
var digits = new Set("0123456789");
function getPathSegments(path) {
  const parts = [];
  let currentSegment = "";
  let currentPart = "start";
  let isIgnoring = false;
  for (const character of path) {
    switch (character) {
      case "\\": {
        if (currentPart === "index") {
          throw new Error("Invalid character in an index");
        }
        if (currentPart === "indexEnd") {
          throw new Error("Invalid character after an index");
        }
        if (isIgnoring) {
          currentSegment += character;
        }
        currentPart = "property";
        isIgnoring = !isIgnoring;
        break;
      }
      case ".": {
        if (currentPart === "index") {
          throw new Error("Invalid character in an index");
        }
        if (currentPart === "indexEnd") {
          currentPart = "property";
          break;
        }
        if (isIgnoring) {
          isIgnoring = false;
          currentSegment += character;
          break;
        }
        if (disallowedKeys.has(currentSegment)) {
          return [];
        }
        parts.push(currentSegment);
        currentSegment = "";
        currentPart = "property";
        break;
      }
      case "[": {
        if (currentPart === "index") {
          throw new Error("Invalid character in an index");
        }
        if (currentPart === "indexEnd") {
          currentPart = "index";
          break;
        }
        if (isIgnoring) {
          isIgnoring = false;
          currentSegment += character;
          break;
        }
        if (currentPart === "property") {
          if (disallowedKeys.has(currentSegment)) {
            return [];
          }
          parts.push(currentSegment);
          currentSegment = "";
        }
        currentPart = "index";
        break;
      }
      case "]": {
        if (currentPart === "index") {
          parts.push(Number.parseInt(currentSegment, 10));
          currentSegment = "";
          currentPart = "indexEnd";
          break;
        }
        if (currentPart === "indexEnd") {
          throw new Error("Invalid character after an index");
        }
      }
      default: {
        if (currentPart === "index" && !digits.has(character)) {
          throw new Error("Invalid character in an index");
        }
        if (currentPart === "indexEnd") {
          throw new Error("Invalid character after an index");
        }
        if (currentPart === "start") {
          currentPart = "property";
        }
        if (isIgnoring) {
          isIgnoring = false;
          currentSegment += "\\";
        }
        currentSegment += character;
      }
    }
  }
  if (isIgnoring) {
    currentSegment += "\\";
  }
  switch (currentPart) {
    case "property": {
      if (disallowedKeys.has(currentSegment)) {
        return [];
      }
      parts.push(currentSegment);
      break;
    }
    case "index": {
      throw new Error("Index was not closed");
    }
    case "start": {
      parts.push("");
      break;
    }
  }
  return parts;
}
function isStringIndex(object, key) {
  if (typeof key !== "number" && Array.isArray(object)) {
    const index = Number.parseInt(key, 10);
    return Number.isInteger(index) && object[index] === object[key];
  }
  return false;
}
function getProperty(object, path, value) {
  if (!isObject(object) || typeof path !== "string") {
    return value === void 0 ? object : value;
  }
  const pathArray = getPathSegments(path);
  if (pathArray.length === 0) {
    return value;
  }
  for (let index = 0; index < pathArray.length; index++) {
    const key = pathArray[index];
    if (isStringIndex(object, key)) {
      object = index === pathArray.length - 1 ? void 0 : null;
    } else {
      object = object[key];
    }
    if (object === void 0 || object === null) {
      if (index !== pathArray.length - 1) {
        return value;
      }
      break;
    }
  }
  return object === void 0 ? value : object;
}
function addToDotSeparatedHierarchicalSet(set, newPath) {
  const tokens = newPath.split(".");
  const ancestorPaths = tokens.map((t, i) => tokens.slice(0, i + 1).join("."));
  if (!alreadyIncludedInDotSeparatedHierarchicalSet(set, ancestorPaths)) {
    const descendentsOfTheNewPath = Array.from(set).filter(
      (path) => path.startsWith(newPath)
    );
    descendentsOfTheNewPath.forEach((descendent) => set.delete(descendent));
    set.add(newPath);
  }
}
function alreadyIncludedInDotSeparatedHierarchicalSet(set, ancestorPaths) {
  for (const ancestorPath of ancestorPaths) {
    if (set.has(ancestorPath)) {
      return true;
    }
  }
  return false;
}
function unstable_useIconSupplementalFieldValue(fieldPath2) {
  const fieldValue = useSupplementalModuleFieldValue(fieldPath2);
  if ((fieldValue == null ? void 0 : fieldValue.type) === "icon") {
    return fieldValue.value;
  }
  return null;
}
function unstable_useRichTextSupplementalFieldValue(fieldPath2) {
  const fieldValue = useSupplementalModuleFieldValue(fieldPath2);
  if ((fieldValue == null ? void 0 : fieldValue.type) === "richtext") {
    return fieldValue.value;
  }
  return null;
}
function unstable_useFormSupplementalFieldValue(fieldPath2) {
  const fieldValue = useSupplementalModuleFieldValue(fieldPath2);
  if ((fieldValue == null ? void 0 : fieldValue.type) === "form") {
    return fieldValue.value;
  }
  return null;
}
function unstable_useCtaSupplementalFieldValue(fieldPath2) {
  const fieldValue = useSupplementalModuleFieldValue(fieldPath2);
  if ((fieldValue == null ? void 0 : fieldValue.type) === "cta") {
    return fieldValue.value;
  }
  return null;
}
function unstable_useMenuSupplementalFieldValue(fieldPath2) {
  const fieldValue = useSupplementalModuleFieldValue(fieldPath2);
  if ((fieldValue == null ? void 0 : fieldValue.type) === "menu") {
    return fieldValue.value;
  }
  return null;
}
function unstable_useSimpleMenuSupplementalFieldValue(fieldPath2) {
  const fieldValue = useSupplementalModuleFieldValue(fieldPath2);
  if ((fieldValue == null ? void 0 : fieldValue.type) === "simplemenu") {
    return fieldValue.value;
  }
  return null;
}
function useSupplementalModuleFieldValue(fieldPath2) {
  const renderContext = useRenderContext();
  useAddToSupplementalFieldValuesRead(fieldPath2);
  if (renderContext.supplementalFieldValues) {
    const supplementalFieldValueMeta = getProperty(
      renderContext.supplementalFieldValues,
      fieldPath2,
      null
    );
    if ((supplementalFieldValueMeta == null ? void 0 : supplementalFieldValueMeta.value) && Object.keys(supplementalFieldValueMeta.value).length > 0) {
      return supplementalFieldValueMeta;
    }
  }
  return null;
}
function useAddToSupplementalFieldValuesRead(fieldPath2) {
  {
    const serverRenderContext = useServerRenderContext();
    if (!serverRenderContext.perServerRequestData.has(
      "supplementalFieldValuesRead"
    )) {
      serverRenderContext.perServerRequestData.set(
        "supplementalFieldValuesRead",
        /* @__PURE__ */ new Set()
      );
    }
    addToDotSeparatedHierarchicalSet(
      serverRenderContext.perServerRequestData.get(
        "supplementalFieldValuesRead"
      ),
      fieldPath2
    );
  }
}
function Icon(props) {
  const {
    id: id2,
    fieldPath: fieldPath2,
    iconStyle,
    purpose = "SEMANTIC",
    width,
    height,
    fill,
    title,
    ...rest
  } = props;
  const instanceId = useId();
  const icon = unstable_useIconSupplementalFieldValue(fieldPath2);
  if (!icon) {
    return null;
  }
  const viewBox = icon.viewPort.join(" ");
  const uniqueId = `${icon.name}${id2 ?? instanceId}`;
  const svgPathTemplate = getSvgPathTemplate(iconStyle, icon);
  if (!svgPathTemplate) {
    return null;
  }
  return /* @__PURE__ */ jsxs(
    "svg",
    {
      id: id2,
      version: "1.0",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox,
      "aria-labelledby": purpose === "SEMANTIC" ? uniqueId : void 0,
      role: purpose === "SEMANTIC" ? "img" : void 0,
      "aria-hidden": purpose === "DECORATIVE" ? true : void 0,
      width: width || void 0,
      height: height || void 0,
      fill: fill || void 0,
      ...rest,
      children: [
        purpose === "SEMANTIC" && title && /* @__PURE__ */ jsx("title", { id: uniqueId, children: title }),
        /* @__PURE__ */ jsx("path", { d: svgPathTemplate })
      ]
    }
  );
}
function getSvgPathTemplate(iconStyle, icon) {
  if (iconStyle && Object.hasOwn(icon.svg, iconStyle)) {
    return icon.svg[iconStyle];
  }
  if (icon.type && Object.hasOwn(icon.svg, icon.type)) {
    return icon.svg[icon.type];
  }
  if (Object.hasOwn(icon.svg, "REGULAR")) {
    return icon.svg["REGULAR"];
  }
  const templates = Object.values(icon.svg);
  if (templates.length > 0) {
    return templates[0];
  }
  return null;
}
var DEFAULT_TAG2 = "div";
function Cta({
  fieldPath: fieldPath2,
  tag: WrapperElement = DEFAULT_TAG2,
  ...otherHTMLAttributes
}) {
  const cta = unstable_useCtaSupplementalFieldValue(fieldPath2);
  if ((cta == null ? void 0 : cta.content) == null) {
    return null;
  }
  return /* @__PURE__ */ jsx(
    WrapperElement,
    {
      dangerouslySetInnerHTML: { __html: cta.content },
      ...otherHTMLAttributes
    }
  );
}
var DEFAULT_TAG3 = "div";
function Form({
  fieldPath: fieldPath2,
  tag: WrapperElement = DEFAULT_TAG3,
  ...otherHTMLAttributes
}) {
  const form = unstable_useFormSupplementalFieldValue(fieldPath2);
  if ((form == null ? void 0 : form.content) == null) {
    return null;
  }
  return /* @__PURE__ */ jsx(
    WrapperElement,
    {
      dangerouslySetInnerHTML: { __html: form.content },
      ...otherHTMLAttributes
    }
  );
}
var DEFAULT_TAG4 = "div";
function RichText({
  fieldPath: fieldPath2,
  tag: WrapperElement = DEFAULT_TAG4,
  ...otherHTMLAttributes
}) {
  const richText = unstable_useRichTextSupplementalFieldValue(fieldPath2);
  if ((richText == null ? void 0 : richText.content) == null) {
    return null;
  }
  return /* @__PURE__ */ jsx(
    WrapperElement,
    {
      dangerouslySetInnerHTML: { __html: richText.content },
      ...otherHTMLAttributes
    }
  );
}
var DEFAULT_TAG5 = "div";
function Menu({
  fieldPath: fieldPath2,
  tag: WrapperElement = DEFAULT_TAG5,
  ...otherHTMLAttributes
}) {
  const menu = unstable_useMenuSupplementalFieldValue(fieldPath2);
  if ((menu == null ? void 0 : menu.content) == null) {
    return null;
  }
  return /* @__PURE__ */ jsx(
    WrapperElement,
    {
      dangerouslySetInnerHTML: { __html: menu.content },
      ...otherHTMLAttributes
    }
  );
}
var DEFAULT_TAG6 = "div";
function SimpleMenu({
  fieldPath: fieldPath2,
  tag: WrapperElement = DEFAULT_TAG6,
  ...otherHTMLAttributes
}) {
  const simpleMenu = unstable_useSimpleMenuSupplementalFieldValue(fieldPath2);
  if ((simpleMenu == null ? void 0 : simpleMenu.content) == null) {
    return null;
  }
  return /* @__PURE__ */ jsx(
    WrapperElement,
    {
      dangerouslySetInnerHTML: { __html: simpleMenu.content },
      ...otherHTMLAttributes
    }
  );
}
function UnsafeScript({
  js,
  ...otherProps
}) {
  return /* @__PURE__ */ jsx(
    "script",
    {
      nonce: getScriptNonce(),
      ...otherProps,
      dangerouslySetInnerHTML: { __html: js }
    }
  );
}
var HS_MODULE_DATA_FETCH_DEP_SYMBOL = Symbol.for("hsServerSideDeps");
function getModuleDataDependecyTypeFrom(func) {
  const dep = func[HS_MODULE_DATA_FETCH_DEP_SYMBOL];
  if (ALL_MODULE_DATA_FETCH_DEPENDENCY_TYPES.includes(dep)) {
    return dep;
  }
  return void 0;
}
var UrlWithoutQuery = class extends URL {
  static from(url) {
    const inputUrl = new URL(url);
    inputUrl.search = "";
    return new UrlWithoutQuery(inputUrl.toString());
  }
  get search() {
    return "";
  }
  get hash() {
    return "";
  }
  get password() {
    return "";
  }
  get hasNoQuery() {
    return true;
  }
};
function getModuleDataDependenciesAsObjectFrom(depType) {
  return MODULE_DATA_FETCH_DEPENDENCY_AS_OBJECT.get(depType);
}
function filterToModuleDataDepsIncludedIn(depType, {
  url,
  contact,
  request
}) {
  const deps = getModuleDataDependenciesAsObjectFrom(depType);
  const extraDeps = {};
  if (deps.urlWithQuery) {
    extraDeps.url = url;
  } else if (deps.urlWithoutQuery) {
    extraDeps.url = UrlWithoutQuery.from(url);
  }
  if (deps.contact) {
    extraDeps.contact = contact;
  }
  if (deps.fullRequest) {
    extraDeps.request = request;
  }
  return extraDeps;
}
function withServerSideDeps(depType, func) {
  if (depType === "moduleProps-urlWithoutQuery") {
    const builtFunc = function getServerSideProps(props, { url }) {
      const extraDeps = { url };
      return func(props, extraDeps);
    };
    builtFunc[HS_MODULE_DATA_FETCH_DEP_SYMBOL] = depType;
    return builtFunc;
  } else if (depType === "moduleProps-urlWithQuery") {
    const builtFunc = function getServerSideProps(props, { url }) {
      const extraDeps = { url };
      return func(props, extraDeps);
    };
    builtFunc[HS_MODULE_DATA_FETCH_DEP_SYMBOL] = depType;
    return builtFunc;
  } else if (depType === "moduleProps-urlWithQuery-contact") {
    const builtFunc = function getServerSideProps(props, { url, contact }) {
      const extraDeps = { url, contact };
      return func(props, extraDeps);
    };
    builtFunc[HS_MODULE_DATA_FETCH_DEP_SYMBOL] = depType;
    return builtFunc;
  } else if (depType === "moduleProps-urlWithQuery-contact-fullRequest") {
    const builtFunc = function getServerSideProps(props, {
      url,
      contact,
      request
    }) {
      const extraDeps = { url, request, contact };
      return func(props, extraDeps);
    };
    builtFunc[HS_MODULE_DATA_FETCH_DEP_SYMBOL] = depType;
    return builtFunc;
  } else if (depType === "moduleProps") {
    const builtFunc = function getServerSideProps(props) {
      return func(props);
    };
    builtFunc[HS_MODULE_DATA_FETCH_DEP_SYMBOL] = depType;
    return builtFunc;
  } else {
    const builtFunc = function getServerSideProps(props) {
      return func(props);
    };
    builtFunc[HS_MODULE_DATA_FETCH_DEP_SYMBOL] = "moduleProps";
    return builtFunc;
  }
}
function withModuleProps(func) {
  return withServerSideDeps("moduleProps", func);
}
function withUrlPath(func) {
  return withServerSideDeps("moduleProps-urlWithoutQuery", func);
}
function withUrlAndQuery(func) {
  return withServerSideDeps("moduleProps-urlWithQuery", func);
}
function withContact(func) {
  return withServerSideDeps("moduleProps-urlWithQuery-contact", func);
}
function withRequest(func) {
  return withServerSideDeps(
    "moduleProps-urlWithQuery-contact-fullRequest",
    func
  );
}
function Module(props) {
  const { name, path, label } = props;
  useAddModule(name, path, label);
  return /* @__PURE__ */ jsx(
    "div",
    {
      dangerouslySetInnerHTML: {
        __html: `<!-- hs-module-placeholder-${name} -->`
      }
    }
  );
}
function useAddModule(name, path, label) {
  const renderContext = useServerRenderContext();
  const moduleValue = { name, path };
  if (label) {
    moduleValue.label = label;
  }
  renderContext.modules = {
    ...renderContext.modules,
    [name]: moduleValue
  };
  renderContext.contentDescriptors = {
    ...renderContext.contentDescriptors,
    modules: {
      ...renderContext.contentDescriptors.modules,
      [name]: moduleValue
    }
  };
}
async function renderServerSidePropsWithAsyncLocalStoreContext$1(getServerSideProps, propsAndDeps, renderContext) {
  var _a;
  if (propsAndDeps.extraDeps.url && ((_a = propsAndDeps.extraDeps) == null ? void 0 : _a.url.toString()) !== renderContext.pageUrl) {
    renderContext.pageUrl = propsAndDeps.extraDeps.url.toString();
  }
  const { props, extraDeps } = propsAndDeps;
  let resultPromise;
  await wrapServerCodeWithRenderContext(renderContext, () => {
    resultPromise = Promise.resolve(getServerSideProps(props, extraDeps));
  });
  return resultPromise;
}
const cmsComponents = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  ALL_MODULE_DATA_FETCH_DEPENDENCY_TYPES,
  ClientRenderContextProvider,
  Cta,
  ExistingIslandContextProvider,
  Form,
  ISO639CodeEnum,
  Icon,
  Island: Island_default,
  MAX_AGE_CACHE_FOR_AN_HOUR,
  MODULE_DATA_FETCH_DEPENDENCY_AS_OBJECT,
  Menu,
  Module,
  RichText,
  RichTextFieldWrapper,
  SCRIPT_NONCE_PLACEHOLDER,
  STYLE_NONCE_PLACEHOLDER,
  ServerRenderContext,
  SharedIslandReducer,
  SharedIslandState,
  SharedIslandStateContext,
  SimpleMenu,
  UNSET_SHARED_STATE_ID,
  UnsafeScript,
  UrlWithoutQuery,
  buildIslandID,
  buildIslandIdentifierPrefix,
  buildStaticEnvConfig,
  createEmptyServerRenderContext,
  createServerRenderContext: createServerRenderContext$1,
  createServerRenderContextV2: createServerRenderContextV2$1,
  fieldPath,
  filterToModuleDataDepsIncludedIn,
  getHubID: getPortalID,
  getHublet,
  getIsDeployed,
  getIsUngatedFor,
  getModuleDataDependecyTypeFrom,
  getModuleDataDependenciesAsObjectFrom,
  getPortalID,
  getScriptNonce,
  getSecret,
  getStyleNonce,
  id,
  isDebugUrl,
  isDebugUrlString,
  logError,
  logErrorDebugOnly,
  logInfo,
  logInfoDebugOnly,
  logWarn,
  logWarnDebugOnly,
  mergeServerRequestData_internal,
  pushHistoryState,
  renderServerSidePropsWithAsyncLocalStoreContext: renderServerSidePropsWithAsyncLocalStoreContext$1,
  setSecrets,
  setSecretsFromEnv,
  sortIslandRootsByPriority,
  unstable_usePodcastEpisodes,
  unstable_usePodcastShows,
  unstable_useVideos,
  useAfterIslandHydration,
  useAvailableTranslations,
  useBasePath,
  useClientRenderContext,
  useGetPerRequestMap_internal,
  useGetRenderRequestId,
  useHasSharedIslandState,
  useInitialPageUrl,
  useInlineHeadAsset,
  useIsAfterMountWithoutForcingRerender,
  useIsDebug,
  useIsInsideIsland,
  useIsServerOrFirstClientRender,
  useIsServerRender,
  useLanguageVariants,
  usePageUrl,
  useRenderContext,
  useServerRenderContext,
  useSharedIslandReducer,
  useSharedIslandReducerInternal,
  useSharedIslandState,
  useSharedIslandStateID,
  withContact,
  withModuleProps,
  withRequest,
  withUrlAndQuery,
  withUrlPath
}, Symbol.toStringTag, { value: "Module" }));
_traverse.default;
const promiseForNewWritableStream = () => {
  const chunks = [];
  const writableStream = new stream.Writable();
  writableStream._write = (chunk, encoding, done) => {
    chunks.push(Buffer.from(chunk));
    done();
  };
  const streamDonePromise = new Promise((resolve, reject) => {
    writableStream.on("error", (error) => {
      reject(error);
    });
    writableStream._final = (done) => {
      resolve(Buffer.concat(chunks).toString("utf8"));
      done();
    };
  });
  return { streamDonePromise, writableStream };
};
const renderStreamToPromise = async (reactElements, options) => {
  const { streamDonePromise, writableStream } = promiseForNewWritableStream();
  const {
    pipe
    /* abort */
  } = renderToPipeableStream(reactElements, {
    ...{},
    onShellReady() {
    },
    onAllReady() {
      pipe(writableStream);
    }
  });
  return streamDonePromise;
};
const {
  createServerRenderContextV2,
  createServerRenderContext,
  renderServerSidePropsWithAsyncLocalStoreContext
} = cmsComponents;
const bootStrapRenderContext = () => {
  const renderContext = createServerRenderContextV2 ? createServerRenderContextV2(null, {
    environmentConfig: null,
    entryPointBasePath: "",
    supplementalFieldValues: {},
    messagesForBrowser: []
  }) : createServerRenderContext("", null);
  return renderContext;
};
async function renderOnServer(elements, renderContext = bootStrapRenderContext(), debugName, renderOptions) {
  let html = await renderStreamToPromise(
    /* @__PURE__ */ jsx(ServerRenderContext.Provider, { value: renderContext, children: elements })
  );
  if (renderContext.messagesForBrowser.length > 0) {
    html = `${html}${scriptTagToLogServerMessages(
      renderContext.messagesForBrowser,
      `Server messages rendering: ${debugName}`
    )}`;
  }
  return { html, renderContext };
}
function cn(...inputs) {
  return twMerge(clsx(inputs));
}
function getHSBaseUrl(authedEnv) {
  return `https://app.hubspot${authedEnv === "qa" ? "qa" : ""}.com`;
}
const TooltipProvider = TooltipPrimitive.Provider;
const Tooltip = TooltipPrimitive.Root;
const TooltipTrigger = TooltipPrimitive.Trigger;
const TooltipContent = React.forwardRef(({ className, sideOffset = 4, ...props }, ref) => /* @__PURE__ */ jsx(
  TooltipPrimitive.Content,
  {
    ref,
    sideOffset,
    className: cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    ),
    ...props
  }
));
TooltipContent.displayName = TooltipPrimitive.Content.displayName;
const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary-hover active:bg-primary-pressed disabled:bg-primary-disabled",
        destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline"
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10"
      }
    },
    defaultVariants: {
      variant: "default",
      size: "default"
    }
  }
);
const Button = React.forwardRef(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return /* @__PURE__ */ jsx(
      Comp,
      {
        className: cn(buttonVariants({ variant, size, className })),
        ref,
        ...props
      }
    );
  }
);
Button.displayName = "Button";
const IconButton = ({ text, url, Icon: Icon2, className }) => /* @__PURE__ */ jsx(Button, { variant: "ghost", className, children: /* @__PURE__ */ jsxs("div", { className: "flex items-center", children: [
  Icon2 && /* @__PURE__ */ jsx(Icon2, { className: "w-6 h-6 mr-2 text-black" }),
  url ? /* @__PURE__ */ jsx("a", { href: url, target: "_blank", children: text }) : /* @__PURE__ */ jsx("div", { children: text })
] }) });
const copyToClipboard = (value) => {
  navigator.clipboard.writeText(value);
};
const IconTooltip = ({
  Icon: Icon2,
  iconClassName,
  tooltipText,
  isCircle = false,
  canCopy = false,
  ...iconProps
}) => {
  const [hasCopied, setHasCopied] = React__default.useState(false);
  React__default.useEffect(() => {
    if (hasCopied) {
      const timer = setTimeout(() => {
        setHasCopied(false);
      }, 2e3);
      return () => clearTimeout(timer);
    }
  }, [hasCopied]);
  const handleClick = () => {
    if (canCopy) {
      copyToClipboard((tooltipText == null ? void 0 : tooltipText.toString()) || "");
      setHasCopied(true);
    }
  };
  return /* @__PURE__ */ jsxs(Tooltip, { delayDuration: 100, children: [
    /* @__PURE__ */ jsx(TooltipTrigger, { asChild: true, children: /* @__PURE__ */ jsx(
      Button,
      {
        variant: "outline",
        size: "icon",
        className: `w-10 h-10 min-w-10 p-0 flex items-center justify-center ${isCircle ? "rounded-full" : ""}`,
        onClick: handleClick,
        children: hasCopied ? /* @__PURE__ */ jsx(Check, { className: iconClassName, strokeWidth: 3, ...iconProps }) : Icon2 && /* @__PURE__ */ jsx(Icon2, { className: iconClassName, strokeWidth: 3, ...iconProps })
      }
    ) }),
    /* @__PURE__ */ jsx(TooltipContent, { side: "bottom", className: "max-w-[200px] font-medium", children: tooltipText })
  ] });
};
const WhiteBox = ({ count, label, subText, onClick }) => /* @__PURE__ */ jsxs(
  "div",
  {
    onClick,
    className: "flex-1 md:flex-none md:w-[170px] h-36 px-8 py-6 bg-white rounded-lg flex flex-col justify-center items-center gap-1 text-gray-900 cursor-pointer",
    children: [
      /* @__PURE__ */ jsx("div", { className: "text-2xl font-light", children: count }),
      /* @__PURE__ */ jsx("div", { className: "text-xs font-semibold uppercase leading-4", children: label }),
      /* @__PURE__ */ jsx("div", { className: "text-xs font-light leading-8", children: subText })
    ]
  }
);
const WhiteBoxList = ({ modulesData, partialsData, projectName }) => /* @__PURE__ */ jsxs("div", { className: "flex flex-row md:flex-row justify-start gap-4 w-full", children: [
  /* @__PURE__ */ jsx(
    WhiteBox,
    {
      count: modulesData.length,
      label: modulesData.length === 1 ? "Module" : "Modules",
      subText: projectName ? "In this Project" : "Available",
      onClick: () => {
        var _a;
        return (_a = document.getElementById("modules-table")) == null ? void 0 : _a.scrollIntoView({ behavior: "smooth" });
      }
    }
  ),
  /* @__PURE__ */ jsx(
    WhiteBox,
    {
      count: partialsData.length,
      label: partialsData.length === 1 ? "Partial" : "Partials",
      subText: projectName ? "In this Project" : "Available",
      onClick: () => {
        var _a;
        return (_a = document.getElementById("partials-table")) == null ? void 0 : _a.scrollIntoView({ behavior: "smooth" });
      }
    }
  )
] });
const CLICommands = ({
  cliCommands = []
}) => /* @__PURE__ */ jsx("div", { className: "flex flex-col justify-end items-start min-h-36 p-6 bg-slate-900 rounded-xl gap-6 overflow-hidden", children: /* @__PURE__ */ jsxs("div", { className: "flex flex-col justify-start items-start gap-6 w-full", children: [
  /* @__PURE__ */ jsx("div", { className: "text-white text-xl font-medium leading-7", children: "Copy CLI Commands" }),
  /* @__PURE__ */ jsx("div", { className: "grid grid-cols-[repeat(auto-fit,minmax(100px,1fr))] auto-cols-fr gap-2 w-full px-1 py-1 bg-white rounded-md border border-slate-300 text-black text-sm font-medium leading-tight", children: cliCommands && cliCommands.map(({ scriptName, description, runCommand }) => /* @__PURE__ */ jsxs(Tooltip, { delayDuration: 100, children: [
    /* @__PURE__ */ jsx(TooltipTrigger, { asChild: true, children: /* @__PURE__ */ jsx("div", { className: "h-8 px-3 py-1.5 bg-white flex items-center justify-center relative group cursor-pointer hover:bg-gray-100 active:bg-gray-200 max-w-[200px] mx-auto w-full", children: /* @__PURE__ */ jsx("span", { children: scriptName }) }) }),
    /* @__PURE__ */ jsxs(
      TooltipContent,
      {
        side: "bottom",
        className: "bg-white font-medium p-4",
        children: [
          /* @__PURE__ */ jsxs("div", { children: [
            /* @__PURE__ */ jsx("div", { className: "font-medium text-base leading-none", children: "Copy Command" }),
            /* @__PURE__ */ jsxs("div", { className: "font-light text-sm leading-5 mt-2 mb-4", children: [
              /* @__PURE__ */ jsx("strong", { className: "font-bold", children: runCommand }),
              /* @__PURE__ */ jsx("br", {}),
              description
            ] })
          ] }),
          /* @__PURE__ */ jsx("div", { className: "flex justify-end", children: /* @__PURE__ */ jsxs(
            Button,
            {
              size: "sm",
              variant: "default",
              onClick: () => navigator.clipboard.writeText(runCommand),
              children: [
                /* @__PURE__ */ jsx(ClipboardCopy, {}),
                " Copy"
              ]
            }
          ) })
        ]
      }
    )
  ] }, scriptName)) })
] }) });
const Hero = ({
  projectName,
  authedPortalId,
  modulesData,
  partialsData,
  hubLModules,
  cliCommands,
  projectData,
  authedEnv
}) => {
  const isAuthed = !!authedPortalId;
  const authTooltipText = isAuthed ? "You are connected to your HubSpot account" : `You are not connected to your HubSpot Account. Please run "hs init" to connect and view content in the dev server.`;
  const combinedModules = [...modulesData, ...hubLModules];
  const handleOpenInApp = () => {
    try {
      const baseUrl = getHSBaseUrl(authedEnv);
      const projectUrl = `${baseUrl}/developer-projects/${authedPortalId}/project/${projectName}`;
      window.open(projectUrl, "_blank");
    } catch (error) {
      console.error("Failed to open project in app:", error);
    }
  };
  return /* @__PURE__ */ jsxs("div", { className: "w-full h-full bg-gray-200 rounded-3xl px-10 py-8", children: [
    /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between gap-4", children: [
      /* @__PURE__ */ jsxs("div", { className: "text-gray-900 text-2xl font-semibold flex items-center gap-2 leading-6", children: [
        "CMS Developer Server",
        isAuthed ? /* @__PURE__ */ jsx(
          IconTooltip,
          {
            Icon: CircleCheck,
            iconClassName: "text-green-500 w-4 h-4",
            tooltipText: authTooltipText,
            isCircle: true
          }
        ) : /* @__PURE__ */ jsx(
          IconTooltip,
          {
            Icon: TriangleAlert,
            iconClassName: "text-red-500 w-4 h-4",
            tooltipText: authTooltipText,
            isCircle: true
          }
        )
      ] }),
      /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-4", children: [
        /* @__PURE__ */ jsx(
          IconButton,
          {
            text: "Slack Community",
            Icon: ExternalLink,
            url: "https://developers.hubspot.com/beta-docs/getting-started/slack/developer-slack",
            className: "hidden lg:block"
          }
        ),
        /* @__PURE__ */ jsx(
          IconButton,
          {
            text: "Getting started docs",
            Icon: ExternalLink,
            url: "https://developers.hubspot.com/docs/cms/cms-react-quickstart?hs_preview=XztBJnma-168859451746",
            className: "hidden lg:block"
          }
        ),
        authedPortalId && projectName && /* @__PURE__ */ jsxs(Tooltip, { delayDuration: 100, children: [
          /* @__PURE__ */ jsx(TooltipTrigger, { asChild: true, children: /* @__PURE__ */ jsx("div", { children: /* @__PURE__ */ jsxs(
            Button,
            {
              size: "sm",
              variant: "default",
              onClick: handleOpenInApp,
              disabled: !projectData,
              children: [
                /* @__PURE__ */ jsx(ExternalLink, {}),
                " View in HubSpot"
              ]
            }
          ) }) }),
          /* @__PURE__ */ jsx(TooltipContent, { children: /* @__PURE__ */ jsxs("div", { children: [
            "To view file in the HubSpot,",
            /* @__PURE__ */ jsx("br", {}),
            'run "hs project upload".',
            /* @__PURE__ */ jsx("br", {}),
            "If you encounter any issues",
            /* @__PURE__ */ jsx("br", {}),
            "with this version, you can revert it in Projects."
          ] }) })
        ] })
      ] })
    ] }),
    projectName && /* @__PURE__ */ jsx("div", { className: "w-full text-gray-900 text-4xl font-extrabold mt-5 mb-4", children: projectName }),
    /* @__PURE__ */ jsx("div", { className: "flex items-center space-x-4 text-black text-sm font-light", children: authedPortalId && /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-2", children: [
      /* @__PURE__ */ jsx("strong", { children: "Portal ID:" }),
      /* @__PURE__ */ jsx("span", { className: "mr-2", children: authedPortalId }),
      /* @__PURE__ */ jsx(IconTooltip, { Icon: Copy, canCopy: true, tooltipText: authedPortalId })
    ] }) }),
    /* @__PURE__ */ jsxs("div", { className: "flex flex-col md:flex-row w-full mt-10 gap-14", children: [
      /* @__PURE__ */ jsx("div", { className: "md:flex-none", children: /* @__PURE__ */ jsx(
        WhiteBoxList,
        {
          modulesData: combinedModules,
          partialsData,
          projectName
        }
      ) }),
      projectName && /* @__PURE__ */ jsx("div", { className: "flex-grow", children: /* @__PURE__ */ jsx(CLICommands, { cliCommands }) })
    ] })
  ] });
};
const Table = React.forwardRef(
  ({ className, containerClassName, ...props }, ref) => /* @__PURE__ */ jsx("div", { className: cn("relative w-full", containerClassName), children: /* @__PURE__ */ jsx(
    "table",
    {
      ref,
      className: cn("w-full caption-bottom text-sm", className),
      ...props
    }
  ) })
);
Table.displayName = "Table";
const TableHeader = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx("thead", { ref, className: cn("[&_tr]:border-b", className), ...props }));
TableHeader.displayName = "TableHeader";
const TableBody = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  "tbody",
  {
    ref,
    className: cn("[&_tr:last-child]:border-0", className),
    ...props
  }
));
TableBody.displayName = "TableBody";
const TableFooter = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  "tfoot",
  {
    ref,
    className: cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    ),
    ...props
  }
));
TableFooter.displayName = "TableFooter";
const TableRow = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  "tr",
  {
    ref,
    className: cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    ),
    ...props
  }
));
TableRow.displayName = "TableRow";
const TableHead = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  "th",
  {
    ref,
    className: cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    ),
    ...props
  }
));
TableHead.displayName = "TableHead";
const TableCell = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  "td",
  {
    ref,
    className: cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className),
    ...props
  }
));
TableCell.displayName = "TableCell";
const TableCaption = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  "caption",
  {
    ref,
    className: cn("mt-4 text-sm text-muted-foreground", className),
    ...props
  }
));
TableCaption.displayName = "TableCaption";
function ReactIcon() {
  return /* @__PURE__ */ jsxs(
    "svg",
    {
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      children: [
        /* @__PURE__ */ jsx("g", { clipPath: "url(#clip0_5814_65268)", children: /* @__PURE__ */ jsx(
          "path",
          {
            d: "M19.7328 7.77091C19.4838 7.67469 19.2259 7.58365 18.9602 7.49755C19.0039 7.29749 19.044 7.10001 19.0796 6.90589C19.6644 3.71841 19.282 1.15055 17.9763 0.305104C16.7243 -0.505568 14.6767 0.339688 12.6087 2.3604C12.4099 2.55471 12.2104 2.76043 12.0111 2.97604C11.8783 2.83339 11.7457 2.69554 11.6134 2.56368C9.44613 0.403003 7.27375 -0.507535 5.96931 0.340359C4.71847 1.15338 4.34805 3.56741 4.87449 6.58821C4.92532 6.87999 4.98475 7.17795 5.05194 7.48091C4.74449 7.5789 4.44767 7.68337 4.16367 7.79451C1.62275 8.78918 0 10.3481 0 11.9651C0 13.6351 1.74202 15.3101 4.38859 16.3258C4.59745 16.406 4.81417 16.4818 5.0375 16.5537C4.96501 16.8814 4.90195 17.2025 4.84903 17.5156C4.34707 20.484 4.73906 22.841 5.98656 23.6489C7.27512 24.4832 9.43767 23.6256 11.5435 21.5589C11.7099 21.3955 11.8769 21.2222 12.0443 21.0406C12.2611 21.2751 12.4777 21.4971 12.6931 21.7053C14.7328 23.676 16.7473 24.4718 17.9937 23.6617C19.2809 22.825 19.6993 20.293 19.1561 17.2124C19.1147 16.9772 19.0664 16.7368 19.0122 16.4922C19.164 16.4418 19.3131 16.3897 19.4585 16.3356C22.2099 15.3121 24 13.6574 24 11.9651C24 10.3422 22.3249 8.77282 19.7328 7.77091ZM19.1361 15.2429C19.0048 15.2917 18.8702 15.3388 18.733 15.3845C18.4292 14.3049 18.0193 13.1568 17.5176 11.9707C17.9963 10.8128 18.3904 9.67938 18.6857 8.60672C18.9312 8.68648 19.1695 8.77062 19.3991 8.8594C21.62 9.71785 22.9747 10.9871 22.9747 11.9651C22.9747 13.0068 21.5117 14.3591 19.1361 15.2429ZM18.1504 17.436C18.3905 18.7982 18.4248 20.0298 18.2657 20.9925C18.1228 21.8576 17.8353 22.4344 17.4799 22.6654C16.7236 23.157 15.1061 22.518 13.3617 20.8326C13.1618 20.6394 12.9603 20.4331 12.7583 20.2148C13.4345 19.3843 14.1104 18.4189 14.77 17.3467C15.9303 17.2311 17.0264 17.0422 18.0204 16.7841C18.0694 17.0059 18.1129 17.2234 18.1504 17.436ZM8.18214 22.5805C7.44318 22.8735 6.85463 22.8819 6.49886 22.6516C5.74182 22.1613 5.42711 20.2689 5.8564 17.7303C5.90557 17.4396 5.96409 17.141 6.03155 16.8357C7.0147 17.0798 8.10281 17.2555 9.26581 17.3613C9.92989 18.4105 10.6253 19.3748 11.3261 20.2192C11.1729 20.3852 11.0204 20.5432 10.8688 20.6921C9.93762 21.606 9.0045 22.2544 8.18214 22.5805ZM4.72018 15.2365C3.54992 14.7874 2.58347 14.2037 1.92102 13.5668C1.32576 12.9944 1.02523 12.4261 1.02523 11.9651C1.02523 10.9838 2.32814 9.73224 4.50116 8.88156C4.76482 8.77834 5.04084 8.68106 5.32727 8.58969C5.62759 9.68657 6.02155 10.8334 6.49698 11.9931C6.0154 13.17 5.61584 14.3351 5.31258 15.4448C5.10838 15.3789 4.91054 15.3095 4.72018 15.2365ZM5.88066 6.36714C5.42963 3.77899 5.72918 1.82658 6.48297 1.33666C7.28588 0.814743 9.06136 1.55889 10.9326 3.42452C11.0523 3.54377 11.1723 3.66857 11.2928 3.7977C10.5955 4.6384 9.90644 5.59551 9.24825 6.63848C8.11952 6.75595 7.03905 6.94465 6.04565 7.19733C5.98319 6.91524 5.92787 6.6381 5.88066 6.36714ZM16.2332 9.23737C15.9957 8.7768 15.7519 8.32712 15.5034 7.88972C16.2691 7.99841 17.0028 8.14269 17.6918 8.31926C17.4849 9.06359 17.2271 9.84184 16.9236 10.6397C16.7059 10.1756 16.4757 9.70768 16.2332 9.23737ZM12.0114 4.62041C12.4844 5.19567 12.9579 5.83793 13.4238 6.53478C12.9544 6.50988 12.4791 6.49693 12 6.49693C11.5254 6.49693 11.0537 6.5096 10.5872 6.53406C11.0535 5.84369 11.5312 5.20228 12.0114 4.62041ZM7.76268 9.24533C7.52546 9.7072 7.29947 10.1726 7.08519 10.6388C6.78662 9.84376 6.5312 9.06196 6.32255 8.30707C7.00731 8.13502 7.73752 7.99433 8.4984 7.88771C8.24635 8.32914 8.00054 8.78213 7.76268 9.24524V9.24533ZM8.52031 16.1245C7.73418 16.026 6.993 15.8926 6.30841 15.7253C6.52039 14.9569 6.78145 14.1584 7.08634 13.3463C7.30118 13.8122 7.52806 14.2777 7.76674 14.7406H7.76678C8.0099 15.2122 8.26177 15.6741 8.52031 16.1245ZM12.0398 19.3909C11.5539 18.8022 11.0692 18.151 10.5958 17.4505C11.0553 17.4708 11.5238 17.4811 12 17.4811C12.4892 17.4811 12.9728 17.4688 13.4488 17.445C12.9814 18.158 12.5095 18.8102 12.0398 19.3909ZM16.9334 13.3049C17.2542 14.1258 17.5246 14.9201 17.7393 15.6754C17.0434 15.8537 16.2921 15.9972 15.5005 16.1039C15.7497 15.6606 15.9956 15.2032 16.2373 14.7327C16.4818 14.2567 16.7139 13.7799 16.9334 13.3049ZM15.3492 14.1576C14.974 14.888 14.5889 15.5852 14.1978 16.2433C13.4857 16.3005 12.7499 16.33 12 16.33C11.2531 16.33 10.5266 16.3039 9.82706 16.2529C9.42029 15.5861 9.02675 14.8869 8.65398 14.1639H8.65407C8.28228 13.4428 7.94009 12.7157 7.63003 11.9927C7.94001 11.268 8.28129 10.54 8.65095 9.8203L8.65086 9.82045C9.0215 9.0988 9.41157 8.40291 9.81459 7.74031C10.5283 7.67973 11.2603 7.64812 12 7.64812H12C12.743 7.64812 13.4759 7.67997 14.1894 7.74107C14.5863 8.39883 14.9737 9.09247 15.3458 9.81421C15.7221 10.5441 16.0678 11.2671 16.3804 11.9763C16.0688 12.6977 15.7238 13.4281 15.3492 14.1576ZM17.4642 1.30241C18.2679 1.8228 18.5804 3.9215 18.0755 6.67354C18.0433 6.84915 18.007 7.02801 17.9676 7.20928C16.9719 6.95131 15.8907 6.75936 14.7586 6.64011C14.0992 5.58568 13.4158 4.62708 12.7298 3.79717C12.9142 3.59797 13.0984 3.40802 13.2818 3.22877C15.0536 1.49744 16.7097 0.813879 17.4642 1.30241ZM12 9.55874C13.1836 9.55874 14.1431 10.6361 14.1431 11.9651C14.1431 13.294 13.1836 14.3714 12 14.3714C10.8164 14.3714 9.85688 13.294 9.85688 11.9651C9.85688 10.6361 10.8164 9.55874 12 9.55874Z",
            fill: "black"
          }
        ) }),
        /* @__PURE__ */ jsx("defs", { children: /* @__PURE__ */ jsx("clipPath", { id: "clip0_5814_65268", children: /* @__PURE__ */ jsx("rect", { width: "24", height: "24", fill: "white" }) }) })
      ]
    }
  );
}
const Sheet = SheetPrimitive.Root;
const SheetTrigger = SheetPrimitive.Trigger;
const SheetClose = SheetPrimitive.Close;
const SheetPortal = SheetPrimitive.Portal;
const SheetOverlay = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  SheetPrimitive.Overlay,
  {
    className: cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    ),
    ...props,
    ref
  }
));
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName;
const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom: "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right: "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm"
      }
    },
    defaultVariants: {
      side: "right"
    }
  }
);
const SheetContent = React.forwardRef(({ side = "right", className, children, ...props }, ref) => /* @__PURE__ */ jsxs(SheetPortal, { children: [
  /* @__PURE__ */ jsx(SheetOverlay, {}),
  /* @__PURE__ */ jsxs(
    SheetPrimitive.Content,
    {
      ref,
      className: cn(sheetVariants({ side }), className),
      ...props,
      children: [
        children,
        /* @__PURE__ */ jsxs(SheetPrimitive.Close, { className: "absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary", children: [
          /* @__PURE__ */ jsx(X, { className: "h-4 w-4" }),
          /* @__PURE__ */ jsx("span", { className: "sr-only", children: "Close" })
        ] })
      ]
    }
  )
] }));
SheetContent.displayName = SheetPrimitive.Content.displayName;
const SheetHeader = ({
  className,
  ...props
}) => /* @__PURE__ */ jsx(
  "div",
  {
    className: cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    ),
    ...props
  }
);
SheetHeader.displayName = "SheetHeader";
const SheetFooter = ({
  className,
  ...props
}) => /* @__PURE__ */ jsx(
  "div",
  {
    className: cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    ),
    ...props
  }
);
SheetFooter.displayName = "SheetFooter";
const SheetTitle = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  SheetPrimitive.Title,
  {
    ref,
    className: cn("text-lg font-semibold text-foreground", className),
    ...props
  }
));
SheetTitle.displayName = SheetPrimitive.Title.displayName;
const SheetDescription = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  SheetPrimitive.Description,
  {
    ref,
    className: cn("text-sm text-muted-foreground", className),
    ...props
  }
));
SheetDescription.displayName = SheetPrimitive.Description.displayName;
var ModuleType = /* @__PURE__ */ ((ModuleType2) => {
  ModuleType2["REACT"] = "react";
  ModuleType2["HUBL"] = "hubl";
  return ModuleType2;
})(ModuleType || {});
function Skeleton({
  className,
  ...props
}) {
  return /* @__PURE__ */ jsx(
    "div",
    {
      className: cn("animate-pulse rounded-md bg-muted", className),
      ...props
    }
  );
}
function useModulePages(previewPath, authedPortalId) {
  const [state, setState] = useState({
    moduleDependencies: null,
    isLoading: false,
    error: null
  });
  useEffect(() => {
    if (!previewPath) return;
    setState((prev) => ({ ...prev, isLoading: true }));
    fetch(
      `/api/module-pages?path=${encodeURIComponent(
        previewPath
      )}&portalId=${authedPortalId}`
    ).then(
      (res) => res.ok ? res.json() : Promise.reject(new Error("Failed to fetch module pages"))
    ).then(
      (data) => setState({ moduleDependencies: data, isLoading: false, error: null })
    ).catch(
      (err) => setState({
        moduleDependencies: null,
        isLoading: false,
        error: String(err)
      })
    );
  }, [previewPath]);
  return state;
}
const getPageEditorUrl = (portalId, pageId, authedEnv) => {
  const baseUrl = getHSBaseUrl(authedEnv);
  return `${baseUrl}/pages/${portalId}/editor/${pageId}/content`;
};
const ComponentDependencyTable = ({
  pages,
  componentType,
  authedPortalId,
  authedEnv
}) => {
  if (pages.length === 0) {
    return /* @__PURE__ */ jsxs("div", { children: [
      "No pages found using this ",
      componentType
    ] });
  }
  function formatSubType(subType) {
    return subType ? subType.split("_").map((word) => word.charAt(0) + word.slice(1).toLowerCase()).join(" ") : "";
  }
  return /* @__PURE__ */ jsxs(
    Table,
    {
      className: "border text-[16px]",
      containerClassName: "h-fit max-h-[770px] overflow-y-auto relative",
      children: [
        /* @__PURE__ */ jsx(TableHeader, { children: /* @__PURE__ */ jsxs(TableRow, { children: [
          /* @__PURE__ */ jsx(TableHead, { className: "border", children: "Page Name" }),
          /* @__PURE__ */ jsx(TableHead, { className: "border", children: "Page Type" })
        ] }) }),
        /* @__PURE__ */ jsx(TableBody, { className: "overflow-y-auto", children: pages.map((page, index) => /* @__PURE__ */ jsxs(TableRow, { className: "odd:bg-white even:bg-gray-50", children: [
          /* @__PURE__ */ jsx(TableCell, { className: "border", children: /* @__PURE__ */ jsxs(
            "a",
            {
              href: getPageEditorUrl(authedPortalId, page.id, authedEnv),
              target: "_blank",
              className: "underline flex items-center gap-1",
              children: [
                page.label,
                /* @__PURE__ */ jsx(ExternalLink, { className: "w-4 h-4" })
              ]
            }
          ) }),
          /* @__PURE__ */ jsx(TableCell, { className: "border", children: formatSubType(page.subType) })
        ] }, index)) })
      ]
    }
  );
};
const ComponentDependencySection = ({
  componentType,
  authedPortalId,
  projectName,
  projectData,
  webRootProjectComponentFolder,
  isOpen,
  moduleData,
  authedEnv
}) => {
  const previewPath = moduleData.type === ModuleType.REACT ? `@projects/${projectName}/${webRootProjectComponentFolder}/components/modules/${moduleData.nameWithExtension}` : `@projects/${moduleData.subPath}`;
  const { moduleDependencies, isLoading, error } = useModulePages(
    projectData && isOpen ? previewPath : null,
    authedPortalId
  );
  return /* @__PURE__ */ jsxs("div", { className: "flex flex-col", children: [
    /* @__PURE__ */ jsxs("div", { className: "flex justify-between items-center mb-3 gap-8", children: [
      /* @__PURE__ */ jsx("h2", { className: "text-2xl font-semibold leading-9 decoration-skip-ink", children: "Dependencies" }),
      projectData && isLoading ? /* @__PURE__ */ jsx(Skeleton, { className: "h-[20px] flex-1" }) : projectData && moduleDependencies && /* @__PURE__ */ jsx("span", { className: "text-lg font-bold leading-8", children: `${moduleDependencies.length} ${moduleDependencies.length === 1 ? "page uses" : "pages use"} this ${componentType}` })
    ] }),
    !projectData ? /* @__PURE__ */ jsx("div", { className: "text-sm text-gray-500 italic", children: 'Please run "hs project upload" to see what pages this module is used on.' }) : isLoading ? /* @__PURE__ */ jsxs("div", { className: "space-y-2", children: [
      /* @__PURE__ */ jsx(Skeleton, { className: "h-[20px] w-full" }),
      /* @__PURE__ */ jsx(Skeleton, { className: "h-[20px] w-full" })
    ] }) : error ? /* @__PURE__ */ jsxs("div", { className: "text-red-500", children: [
      "Error loading dependencies: ",
      error
    ] }) : /* @__PURE__ */ jsx(
      ComponentDependencyTable,
      {
        pages: moduleDependencies || [],
        componentType,
        authedPortalId,
        authedEnv
      }
    )
  ] });
};
const FieldsContainer = ({
  moduleData,
  themeWebRoot
}) => {
  var _a;
  const codeString = JSON.stringify(moduleData.fieldsJson, null, 2);
  const subPath = moduleData.type === ModuleType.REACT ? moduleData.subPath : `hubl/${(_a = moduleData.subPath) == null ? void 0 : _a.split("/hubl/")[1]}`;
  const filePath = moduleData.type === ModuleType.REACT ? `${themeWebRoot}/${subPath}.${moduleData.extension}` : `${themeWebRoot}/${subPath}.module/fields.json`;
  const handleOpenFile = () => {
    if (!filePath) return;
    fetch(`/api/open-file?path=${encodeURIComponent(filePath)}`).catch(
      (err) => console.error("Failed to open file:", err)
    );
  };
  return /* @__PURE__ */ jsxs("div", { className: "flex flex-col", children: [
    /* @__PURE__ */ jsx("h2", { className: "text-2xl font-semibold leading-8", children: "JSON Fields" }),
    codeString ? /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsxs("div", { className: "relative mt-6 mb-3", children: [
        /* @__PURE__ */ jsx(
          Button,
          {
            variant: "outline",
            size: "icon",
            className: "w-6 h-6 text-xs rounded-md absolute top-1.5 right-1.5 z-10 opacity-90",
            onClick: () => navigator.clipboard.writeText(codeString),
            children: /* @__PURE__ */ jsx(ClipboardCopy, {})
          }
        ),
        /* @__PURE__ */ jsx("div", { className: "rounded-xl overflow-hidden p-4 bg-[#0F172A]", children: /* @__PURE__ */ jsx("pre", { className: "text-[14px] font-medium leading-6 text-[#9CDCFE] whitespace-pre-wrap", children: codeString }) })
      ] }),
      /* @__PURE__ */ jsx("div", { children: /* @__PURE__ */ jsx(Button, { variant: "outline", onClick: handleOpenFile, children: "View Code" }) })
    ] }) : /* @__PURE__ */ jsx("p", { children: "No fields found" })
  ] });
};
const ComponentDetailSheet = ({
  moduleData,
  componentType,
  themeWebRoot,
  authedPortalId,
  projectName,
  webRootProjectComponentFolder,
  projectData,
  authedEnv,
  fieldBuilderEnabled,
  children
}) => {
  var _a;
  const [isOpen, setIsOpen] = useState(false);
  const componentTypeLabel = componentType.charAt(0).toUpperCase() + componentType.slice(1);
  return /* @__PURE__ */ jsxs(Sheet, { onOpenChange: setIsOpen, children: [
    /* @__PURE__ */ jsx(SheetTrigger, { asChild: true, children }),
    /* @__PURE__ */ jsxs(
      SheetContent,
      {
        className: "sm:max-w-xl overflow-y-scroll",
        "aria-describedby": "sheet-title",
        children: [
          /* @__PURE__ */ jsxs(SheetHeader, { children: [
            /* @__PURE__ */ jsx(SheetTitle, { className: "text-xl font-semibold leading-8 pb-8", children: /* @__PURE__ */ jsx("span", { id: "sheet-title", children: /* @__PURE__ */ jsxs(Fragment, { children: [
              moduleData.name,
              " - ",
              componentTypeLabel,
              " Details"
            ] }) }) }),
            /* @__PURE__ */ jsxs(SheetDescription, { className: "text-sm leading-5", children: [
              /* @__PURE__ */ jsx("strong", { children: "Directory Path:" }),
              " ",
              moduleData.type === ModuleType.REACT ? moduleData.subPath : `hubl/${((_a = moduleData.subPath) == null ? void 0 : _a.split("/hubl/")[1]) || moduleData.subPath}`
            ] })
          ] }),
          projectName ? /* @__PURE__ */ jsx("div", { className: "grid gap-6 pb-6 my-6 border-b border-gray-300", children: /* @__PURE__ */ jsx(
            ComponentDependencySection,
            {
              componentType,
              authedPortalId,
              projectName,
              projectData,
              webRootProjectComponentFolder,
              isOpen,
              moduleData,
              authedEnv
            }
          ) }) : null,
          /* @__PURE__ */ jsx("div", { className: "grid gap-6 my-6", children: fieldBuilderEnabled ? /* @__PURE__ */ jsx("h2", { className: "text-2xl font-semibold leading-8", children: "Field Builder Placeholder" }) : /* @__PURE__ */ jsx(
            FieldsContainer,
            {
              moduleData,
              themeWebRoot
            }
          ) }),
          /* @__PURE__ */ jsx(SheetFooter, { className: "", children: /* @__PURE__ */ jsx(SheetClose, { asChild: true, children: /* @__PURE__ */ jsx(Button, { variant: "outline", type: "submit", children: "Close" }) }) })
        ]
      }
    )
  ] });
};
const getModuleEditorPreviewUrl = (projectName, webRootProjectComponentFolder, component, portalId, authedEnv) => {
  if (!component.nameWithExtension) {
    throw new Error(`Could not find component: ${component.name}`);
  }
  const previewPath = component.type === ModuleType.REACT ? `@projects/${projectName}/${webRootProjectComponentFolder}/components/modules/${component.nameWithExtension}` : component.subPath;
  const baseUrl = getHSBaseUrl(authedEnv);
  return `${baseUrl}/design-previewer/${portalId}/local-module-preview/${previewPath}`;
};
const ActionButtons = ({
  component,
  componentType,
  onPreviewClick,
  onViewLocalClick,
  sslEnabled,
  projectName,
  projectData
}) => {
  return /* @__PURE__ */ jsxs("div", { className: "flex gap-2", children: [
    componentType === "module" && projectName && /* @__PURE__ */ jsxs(Tooltip, { delayDuration: 100, children: [
      /* @__PURE__ */ jsx(TooltipTrigger, { asChild: true, children: /* @__PURE__ */ jsx("div", { children: /* @__PURE__ */ jsx(
        Button,
        {
          variant: "outline",
          onClick: () => onPreviewClick(component),
          disabled: !sslEnabled || !projectData,
          children: "View in app"
        }
      ) }) }),
      !sslEnabled ? /* @__PURE__ */ jsx(TooltipContent, { children: "Please run the dev server with the --ssl flag to view in HubSpot" }) : !projectData ? /* @__PURE__ */ jsx(TooltipContent, { children: 'Please run "hs project upload" to view in HubSpot' }) : null
    ] }),
    /* @__PURE__ */ jsx(Button, { variant: "outline", onClick: () => onViewLocalClick(component), children: "View local version" })
  ] });
};
function ComponentTable({
  componentList,
  headers,
  webRootProjectComponentFolder,
  themeWebRoot,
  projectName,
  authedPortalId,
  componentType,
  authedEnv,
  sslEnabled,
  projectData,
  fieldBuilderEnabled
}) {
  const handlePreviewClick = (component) => {
    try {
      const previewUrl = getModuleEditorPreviewUrl(
        projectName,
        webRootProjectComponentFolder,
        component,
        authedPortalId,
        authedEnv
      );
      window.open(previewUrl, "_blank");
    } catch (error) {
      console.error("Failed to open preview:", error);
    }
  };
  const handleViewLocalClick = (component) => {
    try {
      let localViewUrl;
      switch (componentType) {
        case "module":
          localViewUrl = component.type === "react" ? `/preview/module/${component.name}` : `/hublmodule/${component.subPath}`;
          break;
        case "template":
          localViewUrl = `/template/${component.subPath}`;
          break;
        case "partial":
          localViewUrl = `/partial/${component.name}`;
          break;
        default:
          throw new Error(`Unknown component type: ${componentType}`);
      }
      window.open(localViewUrl, "_blank");
    } catch (error) {
      console.error("Failed to open preview:", error);
    }
  };
  return /* @__PURE__ */ jsxs(
    Table,
    {
      className: "border text-[16px]",
      containerClassName: "h-fit max-h-[770px] overflow-y-auto relative",
      children: [
        /* @__PURE__ */ jsx(TableHeader, { children: /* @__PURE__ */ jsx(TableRow, { className: "", children: headers.map((header, index) => /* @__PURE__ */ jsx(TableHead, { className: "border", children: header }, index)) }) }),
        /* @__PURE__ */ jsx(TableBody, { className: "overflow-y-auto", children: componentList.map((component, index) => /* @__PURE__ */ jsxs(TableRow, { className: "even:bg-gray-100 hover:bg-gray-200", children: [
          component.name && /* @__PURE__ */ jsx(TableCell, { className: "border", children: componentType === "module" ? /* @__PURE__ */ jsxs(Tooltip, { children: [
            /* @__PURE__ */ jsx(TooltipTrigger, { asChild: true, children: /* @__PURE__ */ jsx("div", { children: /* @__PURE__ */ jsx(
              ComponentDetailSheet,
              {
                moduleData: component,
                componentType,
                themeWebRoot,
                authedPortalId,
                projectName,
                webRootProjectComponentFolder,
                projectData,
                authedEnv,
                fieldBuilderEnabled,
                children: /* @__PURE__ */ jsx("span", { className: "underline cursor-pointer", children: component.name })
              }
            ) }) }),
            /* @__PURE__ */ jsx(TooltipContent, { children: "View details, dependencies, and more" })
          ] }) : /* @__PURE__ */ jsx("span", { children: component.name }) }),
          component.type && /* @__PURE__ */ jsx(TableCell, { className: "border", children: /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-2", children: [
            component.type === "react" ? /* @__PURE__ */ jsx(ReactIcon, {}) : /* @__PURE__ */ jsx(Braces, {}),
            /* @__PURE__ */ jsx("span", { children: component.type === "react" ? "React" : "HubL" })
          ] }) }),
          component.dateCreated && /* @__PURE__ */ jsx(TableCell, { className: "border", children: component.dateCreated }),
          component.status && /* @__PURE__ */ jsx(TableCell, { className: "border", children: component.status }),
          component.templateTypeLabel && /* @__PURE__ */ jsx(TableCell, { className: "border", children: component.templateTypeLabel }),
          /* @__PURE__ */ jsx(TableCell, { className: "border", children: /* @__PURE__ */ jsx(
            ActionButtons,
            {
              component,
              componentType,
              onPreviewClick: handlePreviewClick,
              onViewLocalClick: handleViewLocalClick,
              sslEnabled,
              projectData,
              projectName
            }
          ) })
        ] }, index)) })
      ]
    }
  );
}
const ComponentTableListItem = ({
  id: id2,
  header,
  componentType,
  subtext,
  headers,
  data,
  webRootProjectComponentFolder,
  themeWebRoot,
  projectName,
  authedPortalId,
  authedEnv,
  sslEnabled,
  projectData,
  fieldBuilderEnabled
}) => {
  return /* @__PURE__ */ jsxs("div", { id: id2, className: "mb-16", children: [
    /* @__PURE__ */ jsx("h2", { className: "font-inter text-2xl font-semibold leading-9 tracking-tight text-left mb-6", children: header }),
    subtext && /* @__PURE__ */ jsx("p", { className: "font-inter text-base font-normal leading-7 text-left mb-5", children: subtext }),
    /* @__PURE__ */ jsx(
      ComponentTable,
      {
        authedEnv,
        componentList: data,
        headers,
        webRootProjectComponentFolder,
        themeWebRoot,
        projectName,
        authedPortalId,
        componentType,
        sslEnabled,
        projectData,
        fieldBuilderEnabled
      }
    )
  ] });
};
const ComponentTableList = ({
  modulesData,
  partialsData,
  hubLModules,
  hubLTemplates,
  webRootProjectComponentFolder,
  themeWebRoot,
  projectName,
  authedPortalId,
  authedEnv,
  sslEnabled,
  projectData,
  fieldBuilderEnabled
}) => {
  const mapToTableData = (components, type) => components.map((component) => ({
    ...component,
    type
  }));
  const mappedModuleData = [
    ...mapToTableData(modulesData, "react"),
    ...hubLModules.map((module) => ({
      ...module,
      type: "hubl"
    }))
  ];
  const partialData = [...mapToTableData(partialsData, "react")];
  const templateData = hubLTemplates.map((template) => ({
    ...template,
    type: ModuleType.HUBL
  }));
  return /* @__PURE__ */ jsxs("div", { className: "mt-12", children: [
    /* @__PURE__ */ jsx(
      ComponentTableListItem,
      {
        id: "modules-table",
        header: "Modules",
        componentType: "module",
        headers: ["Name", "Type", "Actions"],
        data: mappedModuleData,
        webRootProjectComponentFolder,
        themeWebRoot,
        projectName,
        authedPortalId,
        authedEnv,
        sslEnabled,
        projectData,
        fieldBuilderEnabled
      }
    ),
    /* @__PURE__ */ jsx(
      ComponentTableListItem,
      {
        id: "partials-table",
        header: "Partials",
        componentType: "partial",
        headers: ["Name", "Type", "Actions"],
        data: partialData,
        sslEnabled,
        projectData,
        fieldBuilderEnabled
      }
    ),
    /* @__PURE__ */ jsx(
      ComponentTableListItem,
      {
        id: "templates-table",
        header: "Templates",
        componentType: "template",
        headers: ["Name", "Type", "Template Type", "Actions"],
        data: templateData,
        sslEnabled,
        projectData,
        fieldBuilderEnabled
      }
    )
  ] });
};
const Separator = React.forwardRef(
  ({ className, orientation = "horizontal", decorative = true, ...props }, ref) => /* @__PURE__ */ jsx(
    SeparatorPrimitive.Root,
    {
      ref,
      decorative,
      orientation,
      className: cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      ),
      ...props
    }
  )
);
Separator.displayName = SeparatorPrimitive.Root.displayName;
const Footer = () => {
  const links = [
    {
      href: "https://www.youtube.com/playlist?list=PLjtLN8FCj4SljVFvkJbSk9J5hq4KTKYcB&jct=pci9oBKT6ttPIJIGKv-rVg",
      text: "CMS React Videos"
    },
    {
      href: "https://developers.hubspot.com/beta-docs/guides/cms/content/modules/build-modules-and-partials-with-react",
      text: "React Docs"
    },
    {
      href: "https://react.dev",
      text: "Learn React"
    },
    {
      href: "https://github.com/HubSpot/cms-react/tree/main/examples",
      text: "Github Examples"
    },
    {
      href: "https://developers.hubspot.com/beta-docs/getting-started/slack/developer-slack",
      text: "Slack Community"
    }
  ];
  return /* @__PURE__ */ jsx("footer", { className: "w-full py-16", children: /* @__PURE__ */ jsx("nav", { className: "flex justify-center items-center gap-4 text-gray-900 text-sm font-normal", children: links.map((link, index) => /* @__PURE__ */ jsxs(React__default.Fragment, { children: [
    /* @__PURE__ */ jsx("a", { href: link.href, target: "_blank", rel: "noopener noreferrer", children: link.text }),
    index < links.length - 1 && /* @__PURE__ */ jsx(Separator, { className: "bg-gray-200 h-4", orientation: "vertical" })
  ] }, index)) }) });
};
function HubSpotIcon({ size = 24, ...props }) {
  return /* @__PURE__ */ jsxs(
    "svg",
    {
      width: "40",
      height: "40",
      viewBox: "0 0 40 40",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      children: [
        /* @__PURE__ */ jsx("circle", { cx: "20", cy: "20", r: "20", fill: "url(#paint0_linear_6129_76863)" }),
        /* @__PURE__ */ jsx(
          "mask",
          {
            id: "mask0_6129_76863",
            maskUnits: "userSpaceOnUse",
            x: "8",
            y: "7",
            width: "24",
            height: "28",
            children: /* @__PURE__ */ jsx(
              "path",
              {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M8.18164 7.27271H31.6885V34.3423H8.18164V7.27271Z",
                fill: "white"
              }
            )
          }
        ),
        /* @__PURE__ */ jsx("g", { mask: "url(#mask0_6129_76863)", children: /* @__PURE__ */ jsx(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M25.2583 26.7794C23.4375 26.7794 21.9612 25.1574 21.9612 23.1566C21.9612 21.1557 23.4375 19.5336 25.2583 19.5336C27.0789 19.5336 28.555 21.1557 28.555 23.1566C28.555 25.1574 27.0789 26.7794 25.2583 26.7794ZM26.2452 16.1818V12.9592C27.0106 12.5618 27.5471 11.7108 27.5471 10.7231V10.6487C27.5471 9.28578 26.532 8.17055 25.292 8.17055H25.2242C23.984 8.17055 22.969 9.28578 22.969 10.6487V10.7231C22.969 11.7108 23.5055 12.5618 24.2709 12.9592V16.182C23.1313 16.3754 22.0899 16.892 21.2306 17.6522L13.1786 10.7689C13.2315 10.5449 13.2687 10.314 13.269 10.0716C13.2708 8.52773 12.1334 7.27469 10.7285 7.27271C9.32372 7.27072 8.1833 8.52062 8.18164 10.0645C8.17984 11.6082 9.31724 12.8613 10.7222 12.8632C11.18 12.8639 11.6036 12.721 11.9752 12.4889L19.8959 19.26C19.2222 20.3773 18.8278 21.7158 18.8278 23.1566C18.8278 24.665 19.2614 26.0602 19.9943 27.2079L17.5855 29.8549C17.395 29.7922 17.1973 29.7482 16.9881 29.7482C15.8338 29.7482 14.8978 30.7767 14.8978 32.0453C14.8978 33.3139 15.8338 34.3423 16.9881 34.3423C18.1426 34.3423 19.0785 33.3139 19.0785 32.0453C19.0785 31.8155 19.0386 31.5981 18.9814 31.389L21.3641 28.7706C22.4457 29.678 23.7925 30.2228 25.2582 30.2228C28.8096 30.2228 31.6885 27.0591 31.6885 23.1566C31.6885 19.6236 29.3267 16.7049 26.2452 16.1818Z",
            fill: "white"
          }
        ) }),
        /* @__PURE__ */ jsx("defs", { children: /* @__PURE__ */ jsxs(
          "linearGradient",
          {
            id: "paint0_linear_6129_76863",
            x1: "0",
            y1: "0",
            x2: "0",
            y2: "40",
            gradientUnits: "userSpaceOnUse",
            children: [
              /* @__PURE__ */ jsx("stop", { stopColor: "#FF8F59" }),
              /* @__PURE__ */ jsx("stop", { offset: "1", stopColor: "#FF7A59" })
            ]
          }
        ) })
      ]
    }
  );
}
function Unauthed({ onClose }) {
  const handleCopyAndConnect = useCallback(() => {
    navigator.clipboard.writeText("hs init");
    window.open("terminal://open?path=.", "_blank");
    window.location.reload();
  }, []);
  return /* @__PURE__ */ jsx("div", { className: "w-full max-w-2xl bg-background border rounded-lg shadow-lg p-8 mx-4", children: /* @__PURE__ */ jsxs("div", { className: "flex flex-col items-center justify-center space-y-6 text-center", children: [
    /* @__PURE__ */ jsx("div", { className: "bg-slate-900/90 rounded-lg p-6 w-full", children: /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-center gap-3", children: [
      /* @__PURE__ */ jsx(ServerCrash, { className: "w-8 h-8 text-white" }),
      /* @__PURE__ */ jsx(ArrowRightLeft, { className: "w-8 h-8 text-slate-400" }),
      /* @__PURE__ */ jsx(HubSpotIcon, { size: 32, className: "text-[#ff7a59]" })
    ] }) }),
    /* @__PURE__ */ jsx("div", { className: "space-y-2", children: /* @__PURE__ */ jsx("h2", { className: "text-2xl font-semibold tracking-tight", children: "Enjoy the full preview experience by connecting to HubSpot" }) }),
    /* @__PURE__ */ jsx("div", { className: "space-y-4 max-w-md", children: /* @__PURE__ */ jsxs("div", { className: "space-y-2 text-sm text-muted-foreground", children: [
      /* @__PURE__ */ jsxs("p", { children: [
        "Connect by using the",
        " ",
        /* @__PURE__ */ jsx("code", { className: "bg-slate-100 px-1.5 py-0.5 rounded text-slate-900", children: "hs init" }),
        " ",
        "command to create a new config file. Ensure there's a",
        " ",
        /* @__PURE__ */ jsx("code", { className: "bg-muted px-1.5 py-0.5 rounded-md", children: "hubspot.config.yaml" }),
        " ",
        "in the folder (or a parent)."
      ] }),
      /* @__PURE__ */ jsx("p", { children: "By connecting and authenticating you can use local proxy functionality and module preview routes." }),
      /* @__PURE__ */ jsx("p", { className: "italic", children: `You can work on modules locally at "/module/[module_name]", but we won't have all your account data to display in this server.` })
    ] }) }),
    /* @__PURE__ */ jsxs("div", { className: "flex gap-4", children: [
      /* @__PURE__ */ jsx(Button, { variant: "outline", onClick: onClose, children: "Close" }),
      /* @__PURE__ */ jsx(Button, { onClick: handleCopyAndConnect, children: "Connect Now" })
    ] })
  ] }) });
}
function App({
  initialProps
}) {
  const {
    projectName,
    authedEnv,
    authedPortalId,
    modulesData,
    hubLModules,
    partialsData,
    hubLTemplates,
    webRootProjectComponentFolder,
    themeWebRoot,
    cliCommands,
    sslEnabled,
    projectData,
    fieldBuilderEnabled
  } = initialProps;
  const [showUnauthed, setShowUnauthed] = useState(!authedPortalId);
  const handleCloseUnauthed = () => {
    setShowUnauthed(false);
  };
  return /* @__PURE__ */ jsx(TooltipProvider, { children: /* @__PURE__ */ jsxs("div", { className: "container relative pt-8", children: [
    /* @__PURE__ */ jsx(
      Hero,
      {
        projectName,
        authedPortalId,
        modulesData,
        partialsData,
        hubLModules,
        cliCommands,
        projectData,
        authedEnv
      }
    ),
    /* @__PURE__ */ jsx(
      ComponentTableList,
      {
        modulesData,
        hubLModules,
        partialsData,
        hubLTemplates,
        webRootProjectComponentFolder,
        themeWebRoot,
        projectName,
        authedPortalId,
        authedEnv,
        sslEnabled,
        projectData,
        fieldBuilderEnabled
      }
    ),
    /* @__PURE__ */ jsx(Footer, {}),
    showUnauthed && /* @__PURE__ */ jsx("div", { className: "fixed inset-0 bg-background/80 backdrop-blur-sm", children: /* @__PURE__ */ jsx("div", { className: "fixed inset-0 flex items-center justify-center", children: /* @__PURE__ */ jsx(Unauthed, { onClose: handleCloseUnauthed }) }) })
  ] }) });
}
async function render(initialProps) {
  const html = await renderOnServer(
    /* @__PURE__ */ jsx(StrictMode, { children: /* @__PURE__ */ jsx(App, { initialProps }) })
  );
  return html;
}
export {
  render
};
