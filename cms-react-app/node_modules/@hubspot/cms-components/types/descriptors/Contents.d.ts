declare type VerticalAlignment = 'TOP' | 'MIDDLE' | 'BOTTOM';
declare type HorizontalAlignment = 'LEFT' | 'CENTER' | 'RIGHT';
declare type BackgroundPosition = 'TOP_LEFT' | 'TOP_CENTER' | 'TOP_RIGHT' | 'MIDDLE_LEFT' | 'MIDDLE_CENTER' | 'MIDDLE_RIGHT' | 'BOTTOM_LEFT' | 'BOTTOM_CENTER' | 'BOTTOM_RIGHT';
declare type BackgroundSize = 'cover' | 'contain' | 'auto';
declare type BackgroundImage = {
    backgroundImage?: {
        backgroundPosition?: BackgroundPosition;
        backgroundSize?: BackgroundSize;
        imageUrl?: string;
    };
};
declare type BackgroundLinearGradientDirection = 'to bottom' | 'to top' | 'to left' | 'to right';
declare type BackgroundLinearGradient = {
    direction: BackgroundLinearGradientDirection;
    colors: [string, string];
};
declare type Spacing = {
    top?: string | number;
    bottom?: string | number;
    left?: string | number;
    right?: string | number;
} | {
    [breakpointName: string]: {
        top?: string | number;
        bottom?: string | number;
        left?: string | number;
        right?: string | number;
    };
};
export declare type DndArea = {
    type: 'dndArea';
    label?: string;
    className?: string;
    fullWidth?: boolean;
    children: (DndSection | SectionTemplate)[];
};
export declare type DndSection = {
    type: 'dndSection';
    backgroundColor?: string;
    backgroundImage?: BackgroundImage;
    fullWidth?: boolean;
    padding?: Spacing;
    margin?: Spacing;
    verticalAlignment?: VerticalAlignment;
    children: (DndColumn | DndModule)[];
};
export declare type SectionTemplate = {
    type: 'sectionTemplate';
    path?: string;
    context?: Record<string, any>;
};
export declare type DndColumn = {
    type: 'dndColumn';
    hidden?: boolean;
    offset?: number | string;
    width?: number | string;
    backgroundColor?: string;
    backgroundImage?: BackgroundImage;
    backgroundLinearGradient?: BackgroundLinearGradient;
    maxWidth?: number | string;
    margin?: Spacing;
    padding?: Spacing;
    verticalAlignment?: VerticalAlignment;
    children: DndRow[];
};
export declare type DndRow = {
    type: 'dndRow';
    hidden?: boolean;
    verticalAlignment?: VerticalAlignment;
    backgroundColor?: string;
    backgroundImage?: BackgroundImage;
    backgroundLinearGradient?: BackgroundLinearGradient;
    margin?: Spacing;
    padding?: Spacing;
    children: (DndModule | DndColumn)[];
};
export declare type DndModule = {
    type: 'dndModule';
    path: string;
    label?: string;
    width?: number | string;
    offset?: number | string;
    horizontalAlignment?: HorizontalAlignment;
    fields?: Record<string, any>;
};
export declare type GlobalPartial = {
    type: 'globalPartial';
    path: string;
};
export declare type StaticModule = {
    type: 'module';
    path: string;
    label?: string;
    fields?: Record<string, any>;
};
export declare type SectionContents = DndSection;
export declare type PageContents = Record<string, DndArea | StaticModule | GlobalPartial>;
export declare type ContentOutlets<T> = {
    [K in keyof T]: React.ReactElement;
};
export {};
