import { ReactNode } from 'react';
export declare type BaseField = {
    advancedVisibility?: AdvancedVisibility;
    displayWidth?: string;
    helpText?: string;
    id?: string;
    inheritedValueDefaultValuePath?: string;
    inheritedValuePropertyValuePaths?: {};
    inlineHelpText?: string | null;
    label: string;
    links?: {
        type: 'THEME_EDITOR' | 'BRAND_SETTINGS';
        name: string;
        params: {
            theme_path?: string;
            theme_field_path?: string;
            brand_kit_tab?: string;
        };
    }[];
    internal?: boolean;
    locked?: boolean;
    name: string;
    occurrence?: {
        min: number;
        max?: number | null;
        sorting_label_field?: string;
        default?: number | null;
    };
    propertyAliasesPaths?: {};
    required?: boolean;
    sortable?: boolean;
    visibility?: {
        controlling_field?: string | null;
        controlling_field_path?: string | null;
        controlling_value_regex?: string | null;
        operator?: 'NOT_EQUAL' | 'EQUAL' | 'EMPTY' | 'NOT_EMPTY' | 'MATCHES_REGEX' | null;
        hidden_subfields?: {} | null;
        access?: {
            operator: 'HAS_ALL' | 'HAS_ANY' | 'HAS_NONE';
            scopes?: string[];
            gates?: string[];
        } | null;
    };
    visibilityRules?: 'SIMPLE' | 'ADVANCED';
};
export declare type AdvancedVisibility = {
    boolean_operator: 'AND' | 'OR';
    criteria: {
        controlling_field_path?: string;
        operator: 'NOT_EQUAL' | 'EQUAL' | 'EMPTY' | 'NOT_EMPTY' | 'MATCHES_REGEX';
        controlling_value_regex: string;
    }[];
    children?: AdvancedVisibility[];
};
export declare type AlignmentFieldType = BaseField & {
    type: 'alignment';
    alignmentDirection?: 'HORIZONTAL' | 'VERTICAL' | 'BOTH';
    default?: {
        horizontal_align?: 'LEFT' | 'CENTER' | 'RIGHT';
        vertical_align?: 'TOP' | 'MIDDLE' | 'BOTTOM';
    };
};
export declare type AudioFieldType = BaseField & {
    type: 'audioplayer';
    default?: {
        file_id?: number;
        file_duration?: number;
        file_extension?: string;
        file_url?: string;
        title?: string;
    };
};
export declare type BackgroundImageFieldType = BaseField & {
    type: 'backgroundimage';
    default?: {
        src?: string;
        background_position?: 'TOP_LEFT' | 'TOP_CENTER' | 'TOP_RIGHT' | 'MIDDLE_LEFT' | 'MIDDLE_CENTER' | 'MIDDLE_RIGHT' | 'BOTTOM_LEFT' | 'BOTTOM_CENTER' | 'BOTTOM_RIGHT';
        background_size?: 'COVER' | 'CONTAIN' | 'AUTO';
    };
};
export declare type BlogFieldType = BaseField & {
    type: 'blog';
    placeholder?: string;
    default?: number | number[];
};
export declare type BooleanFieldType = BaseField & {
    type: 'boolean';
    default?: boolean;
    display?: 'toggle' | 'checkbox';
};
export declare type CssUnit = 'px' | 'pt' | 'em' | 'rem' | '%' | 'ex' | 'ch';
export declare type BorderSideType = {
    width: {
        value: number;
        units: CssUnit;
    };
    opacity: number;
    style: 'none' | 'solid' | 'dashed' | 'double' | 'groove' | 'ridge' | 'inset' | 'outset';
    color: string;
};
export declare type BorderFieldType = BaseField & {
    type: 'border';
    allowCustomBorderSides?: boolean;
    default?: {
        top?: BorderSideType;
        right?: BorderSideType;
        bottom?: BorderSideType;
        left?: BorderSideType;
    };
};
declare type ExpandIconChoices = [
    [
        'caret',
        'caret'
    ],
    [
        'chevron',
        'chevron'
    ],
    [
        'plus',
        'plus'
    ]
];
declare type LayoutChoices = [
    [
        'cards',
        'cards'
    ],
    [
        'tiles',
        'tiles'
    ],
    [
        'minimal',
        'minimal'
    ]
];
declare type IconSizeChoices = [
    [
        'small',
        'small'
    ],
    [
        'medium',
        'medium'
    ],
    [
        'large',
        'large'
    ]
];
declare type IconBackgroundShapeChoices = [
    [
        'none',
        'none'
    ],
    [
        'square',
        'square'
    ],
    [
        'rounded',
        'rounded'
    ],
    [
        'circle',
        'circle'
    ]
];
declare type Presets = {
    expand_icon: ExpandIconChoices;
    layout: LayoutChoices;
    icon_size: IconSizeChoices;
    social_icon_size: IconSizeChoices;
    icon_background_shape: IconBackgroundShapeChoices;
    social_icon_background_shape: IconBackgroundShapeChoices;
};
interface SharedChoiceFieldTypes {
    multiple?: boolean;
    reorderingEnabled?: boolean;
    placeholder?: string;
    default?: string | number | Array<string | number>;
}
declare type BaseChoiceField = BaseField & SharedChoiceFieldTypes & {
    name: string;
    type: 'choice';
    choices: [any, string][];
    display?: 'radio' | 'checkbox' | 'select' | 'buttons';
    preset?: keyof Presets;
};
declare type ChoiceFieldWithPresetProperty<P extends keyof Presets> = BaseField & SharedChoiceFieldTypes & {
    name: string;
    type: 'choice';
    choices: Presets[P];
    display: 'buttons';
    preset: P;
};
export declare type ChoiceFieldType = BaseChoiceField | ChoiceFieldWithPresetProperty<'expand_icon'> | ChoiceFieldWithPresetProperty<'layout'> | ChoiceFieldWithPresetProperty<'icon_size'> | ChoiceFieldWithPresetProperty<'social_icon_size'> | ChoiceFieldWithPresetProperty<'icon_background_shape'> | ChoiceFieldWithPresetProperty<'social_icon_background_shape'>;
export declare type ColorFieldType = BaseField & {
    type: 'color';
    showOpacity?: boolean;
    alternateNames?: string[];
    limitedOptions?: string[];
    default?: {
        color?: string;
        css?: string;
        hex?: string;
        opacity?: number;
        rgb?: string;
        rgba?: string;
    };
};
export declare type CrmObjectFieldType = BaseField & {
    type: 'crmobject';
    objectType: string;
    propertiesToFetch: Array<string>;
    displayFormat?: string;
    displayProperties?: Array<string>;
    placeholder?: string;
    default?: {
        id?: number;
    };
};
export declare type CrmObjectPropertyFieldType = BaseField & {
    type: 'crmobjectproperty';
    objectType: string;
    placeholder?: string;
    default?: {
        property?: string;
    };
};
export declare type CtaFieldType = BaseField & {
    type: 'cta';
    default?: string;
};
export declare type DateFieldType = BaseField & {
    type: 'date';
    default?: number;
};
export declare type DateTimeFieldType = BaseField & {
    type: 'datetime';
    step?: number;
    default?: number;
};
export declare type EmailFieldType = BaseField & {
    type: 'email';
    default?: Array<string>;
    allowCustomEmailAddresses?: boolean;
};
export declare type EmbedFieldType = BaseField & {
    type: 'embed';
    supportedSourceTypes: Array<'oembed' | 'html' | 'media_bridge'>;
    supportedOembedTypes: Array<'photo' | 'video' | 'link' | 'rich'>;
    supportedMediaBridgeProviders: Array<number>;
    resizable?: boolean;
    showPreview?: boolean;
    default?: {
        source_type?: 'oembed' | 'html' | 'media_bridge';
        oembed_string?: string;
        oembed_response?: {};
        size_type?: 'auto' | 'auto_custom_max' | 'auto_full_width' | 'exact';
        width?: number;
        height?: number;
        max_width?: number;
        max_height?: number;
        embed_type?: string;
        media_bridge_object?: {};
    };
};
export declare type FileFieldType = BaseField & {
    type: 'file';
    picker: 'file' | 'image' | 'video' | 'document' | 'audio';
    default?: string;
};
export declare type FollowUpEmailFieldType = BaseField & {
    type: 'followupemail';
    placeholder?: string;
    default?: string;
};
declare type FontVariants = '100' | '100i' | '200' | '200i' | '300' | '300i' | '400' | '400i' | '500' | '500i' | '600' | '600i' | '700' | '700i' | '800' | '800i' | '900' | '900i';
export declare type FontFieldType = BaseField & {
    type: 'font';
    loadExternalFonts?: boolean;
    alternateNames?: string[];
    limitedOptions?: string[];
    default?: {
        font: string;
        font_set?: 'DEFAULT' | 'GOOGLE' | 'CUSTOM';
        google_font_variants?: FontVariants[];
        size?: number;
        size_unit?: CssUnit;
        color?: string;
        styles?: {
            key: string;
            value: string;
        };
        variant?: string;
        fallback?: string;
    };
};
export declare type FormFieldType = BaseField & {
    type: 'form';
    allowInlineFormEditing?: boolean;
    disableInlineFormEditing?: boolean;
    embedVersions?: Array<'v2' | 'v3' | 'v4'>;
    supportAllWebinarTypes?: boolean;
    default?: {
        form_id?: string;
        form_type?: 'HUBSPOT' | 'TICKET_FORM';
        response_type?: 'inline' | 'redirect';
        message?: string;
        redirect_id?: number;
        redirect_url?: string;
        workflow_id?: Array<number>;
        webinar_id?: string;
        webinar_source?: string;
        gotowebinar_webinar_key?: string;
    };
};
export declare type GradientFieldType = BaseField & {
    type: 'gradient';
    default?: {
        side_or_corner?: {
            verticalSide?: 'TOP' | 'BOTTOM';
            horizontalSide?: 'LEFT' | 'RIGHT';
        };
        color?: Array<GradientColorType>;
    };
};
export declare type GradientColorType = {
    color: {
        r: string;
        g: string;
        b: string;
        a: number;
    };
};
export declare type HtmlFieldType = BaseField & {
    type: 'html';
    default?: string;
};
export declare type HubDbRowFieldType = BaseField & {
    type: 'hubdbrow';
    tableNameOrId: string | number;
    columnsToFetch: Array<string>;
    displayFormat?: string;
    displayColumns?: Array<string>;
    placeholder?: string;
    default?: {
        id: number;
    };
};
export declare type HubDbTableFieldType = BaseField & {
    type: 'hubdbtable';
    placeholder?: string;
    default?: string | number;
};
export declare type HublFieldType = BaseField & {
    type: 'hubl';
    default?: string;
};
export declare type IconFieldType = BaseField & {
    type: 'icon';
    iconSet?: 'fontawesome-5' | 'fontawesome-5.0.10' | 'fontawesome-5.14.0' | 'fontawesome-6.4.2';
    default?: {
        name?: string;
        type?: 'SOLID' | 'REGULAR';
        unicode?: string;
    };
};
export declare type ImageFieldType = BaseField & {
    type: 'image';
    resizable?: boolean;
    responsive?: boolean;
    showLoading?: boolean;
    default?: {
        src: string;
        alt?: string;
        width?: number;
        height?: number;
        max_width?: number;
        max_height?: number;
        size_type?: 'auto' | 'auto_custom_max' | 'auto_full_width' | 'exact';
        loading?: 'disabled' | 'eager' | 'lazy';
    };
};
export declare type LinkFieldType = BaseField & {
    type: 'link';
    placeholder?: string;
    showAdvancedRelOptions?: boolean;
    supportedTypes?: Array<UrlTypes>;
    default?: {
        url?: {
            type: UrlTypes;
            content_id: number;
            href: string;
        };
        open_in_new_tab?: boolean;
        no_follow?: boolean;
        sponsored?: boolean;
        user_generated_content?: boolean;
    };
};
export declare type LogoFieldType = BaseField & {
    type: 'logo';
    default?: {
        src?: string;
        alt?: string;
        width?: number;
        height?: number;
        override_inherited_src?: boolean;
        loading?: string;
        suppress_company_name?: boolean;
    };
    showLoading: boolean;
};
export declare type MeetingFieldType = BaseField & {
    type: 'meeting';
    embeddable?: boolean;
    placeholder?: string;
    default?: string;
};
export declare type MenuFieldType = BaseField & {
    type: 'menu';
    placeholder?: string;
    default?: number | string;
};
export declare type NumberFieldType = BaseField & {
    type: 'number';
    default?: number | null;
    prefix?: string;
    suffix?: string;
    min?: number;
    max?: number;
    step?: number;
    display?: 'text' | 'slider';
    format?: 'ANY' | 'INTEGER';
    placeholder?: string;
};
export declare type PageFieldType = BaseField & {
    type: 'page';
    placeholder?: string;
    default?: number | number[];
};
export declare type PaymentFieldType = BaseField & {
    type: 'payment';
    default?: {
        id?: number;
    };
};
export declare type PodcastFieldType = BaseField & {
    type: 'podcast';
    entityType?: 'episode' | 'show';
    default?: {
        episode_id?: number;
        show_id?: number;
    };
};
declare type RichTextFeatures = 'block' | 'font_family' | 'font_size' | 'bold' | 'italic' | 'underline' | 'text_color' | 'background_color' | 'alignment' | 'bulleted_list' | 'numbered_list' | 'lineheight' | 'outdent' | 'indent' | 'strikethrough' | 'superscript' | 'subscript' | 'code_format' | 'link' | 'image' | 'emoji' | 'personalize' | 'cta' | 'embed' | 'video' | 'table' | 'charmap' | 'anchor' | 'hr' | 'nonbreaking_space' | 'source_code' | 'visual_blocks' | 'colors' | 'fonts' | 'indents' | 'lists' | 'standard_emphasis' | 'advanced_emphasis';
export declare type RichTextFieldType = BaseField & {
    type: 'richtext';
    default?: string;
    enabledFeatures?: RichTextFeatures[];
};
export declare type SfdcCamapaignFieldType = BaseField & {
    type: 'salesforcecampaign';
    default?: string;
};
export declare type SimpleMenuFieldType = BaseField & {
    type: 'simplemenu';
    default?: Array<{}>;
};
export declare type SpacingValueType = {
    value: number;
    units: CssUnit;
};
export declare type SpacingLimitType = {
    min: number;
    max: number;
    units: Array<CssUnit>;
};
export declare type SpacingFieldType = BaseField & {
    type: 'spacing';
    limits?: {
        padding: {
            top?: SpacingLimitType;
            right?: SpacingLimitType;
            bottom?: SpacingLimitType;
            left?: SpacingLimitType;
        };
        margin: {
            top?: SpacingLimitType;
            right?: SpacingLimitType;
            bottom?: SpacingLimitType;
            left?: SpacingLimitType;
        };
    };
    default?: {
        padding?: {
            top?: SpacingValueType;
            right?: SpacingValueType;
            bottom?: SpacingValueType;
            left?: SpacingValueType;
        };
        margin?: {
            top?: SpacingValueType;
            right?: SpacingValueType;
            bottom?: SpacingValueType;
            left?: SpacingValueType;
        };
    };
};
export declare type SurveyFieldType = BaseField & {
    type: 'survey';
    placeholder?: string;
    default?: {
        survey_type?: 'CES' | 'CSAT' | 'NPS';
        id?: string;
    };
};
export declare type TagFieldType = BaseField & {
    type: 'tag';
    tagValue: 'SLUG' | 'NAME' | 'ID' | 'ALL';
    default?: string | number | {
        slug: string;
        id: string;
        name: string;
    };
};
export declare type TextFieldType = BaseField & {
    type: 'text';
    default?: string;
    validationRegex?: string;
    allowNewLine?: boolean;
    showEmojiPicker?: boolean;
};
export declare type TextAlignmentFieldType = BaseField & {
    type: 'textalignment';
    default?: {
        text_align?: 'LEFT' | 'CENTER' | 'RIGHT' | 'JUSTIFY';
    };
};
declare type UrlTypes = 'EXTERNAL' | 'CONTENT' | 'FILE' | 'EMAIL_ADDRESS' | 'BLOG' | 'CALL_TO_ACTION' | 'WHATSAPP_NUMBER' | 'PHONE_NUMBER' | 'PAYMENT';
export declare type UrlFieldType = BaseField & {
    type: 'url';
    supportedTypes: Array<UrlTypes>;
    default?: {
        type?: UrlTypes;
        href?: string;
        content_id?: number;
        supported_types?: Array<UrlTypes>;
    };
};
export declare type VideoFieldType = BaseField & {
    type: 'videoplayer';
    resizable?: boolean;
    showAdvancedOptions?: boolean;
    showPreview?: boolean;
    default?: {
        player_id?: number;
        width?: number;
        height?: number;
        max_width?: number;
        max_height?: number;
        size_type?: 'exact' | 'auto' | 'auto_custom_max' | 'auto_full_width';
        player_type?: string;
        loop_video?: boolean;
        mute_by_default?: boolean;
        autoplay?: boolean;
        hide_controls?: boolean;
        conversion_asset?: any;
    };
};
export declare type WorkflowFieldType = BaseField & {
    type: 'workflow';
    default?: number;
};
declare type GroupOccurrenceMeta = {
    featured_enabled?: boolean;
    featured_limit?: number;
};
export declare type GroupFieldType = BaseField & {
    type: 'group';
    children?: Field[];
    expanded?: boolean;
    default?: [] | {};
    tab?: 'STYLE';
    groupOccurrenceMeta?: GroupOccurrenceMeta;
    useLargeLabel?: boolean;
    display?: `drilldown` | `accordion` | `inline`;
};
declare type CamelCaseField = AlignmentFieldType | AudioFieldType | BackgroundImageFieldType | BlogFieldType | BooleanFieldType | BorderFieldType | ChoiceFieldType | ColorFieldType | CrmObjectFieldType | CrmObjectPropertyFieldType | CtaFieldType | DateFieldType | DateTimeFieldType | EmailFieldType | EmbedFieldType | FileFieldType | FollowUpEmailFieldType | FontFieldType | FormFieldType | GradientFieldType | GroupFieldType | HtmlFieldType | HubDbRowFieldType | HubDbTableFieldType | HublFieldType | IconFieldType | ImageFieldType | LinkFieldType | LogoFieldType | MeetingFieldType | MenuFieldType | NumberFieldType | PageFieldType | PaymentFieldType | PodcastFieldType | RichTextFieldType | SfdcCamapaignFieldType | SimpleMenuFieldType | SpacingFieldType | SurveyFieldType | TagFieldType | TextAlignmentFieldType | TextFieldType | UrlFieldType | VideoFieldType | WorkflowFieldType;
export declare type Field = CamelToSnakeCaseMap<CamelCaseField>;
export declare type FieldType = CamelCaseField['type'];
declare type CamelToSnakeCase<S extends string> = S extends `${infer T}${infer U}` ? `${T extends Capitalize<T> ? '_' : ''}${Lowercase<T>}${CamelToSnakeCase<U>}` : S;
declare type CamelToSnakeCaseMap<T> = {
    [K in keyof T as CamelToSnakeCase<string & K>]: T[K];
};
declare type AdaptChildren<T extends {
    [key: string]: any;
}> = {
    [Property in keyof T]: Property extends 'children' ? ReactNode : T[Property];
};
export declare type FieldComponentProps<T extends FieldType> = AdaptChildren<AdaptChildren<Omit<Extract<CamelCaseField, {
    type: T;
}>, 'type'>>>;
export declare type FieldGroupWithChildren<C> = Omit<GroupFieldType, 'children'> & {
    children: C;
};
export declare type RepeaterGroup<T> = Array<Record<'_repeater', T>>;
export declare type RequiredField<T> = {
    _requiredField: InferDefault<T> & {};
};
declare type InferDefault<T> = T extends {
    default?: infer D;
} ? D : T;
declare type ExtractNullableDefault<T> = T extends {
    _requiredField: infer R;
} ? R : InferDefault<T>;
declare type DefaultValue<T> = T extends {
    children: infer C;
} ? DefaultValues<C> : T extends {
    _repeater: infer R;
}[] ? DefaultValues<R>[] : ExtractNullableDefault<T>;
export declare type DefaultValues<T> = {
    [P in keyof T]: DefaultValue<T[P]>;
};
export {};
