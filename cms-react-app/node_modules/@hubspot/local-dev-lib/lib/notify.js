"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.triggerNotify = void 0;
const fs_1 = __importDefault(require("fs"));
const moment_1 = __importDefault(require("moment"));
const debounce_1 = __importDefault(require("debounce"));
const lang_1 = require("../utils/lang");
const i18nKey = 'utils.notify';
const notifyQueue = [];
const notifyPromises = [];
const debouncedWaitForActionsToCompleteAndWriteQueueToFile = (0, debounce_1.default)(waitForActionsToCompleteAndWriteQueueToFile, 500);
// Collects actions that have been taken on files and the corresponding Promise
// for the remote action that is in-process
function triggerNotify(filePathToNotify, actionType, filePath, actionPromise) {
    if (filePathToNotify) {
        notifyQueue.push(`${(0, moment_1.default)().toISOString()} ${actionType}: ${filePath}\n`);
        notifyPromises.push(actionPromise);
        debouncedWaitForActionsToCompleteAndWriteQueueToFile(filePathToNotify);
    }
}
exports.triggerNotify = triggerNotify;
// Clears both the notifyQueue and notifyPromises array, generates the output
// string that will be eventually logged, and waits for all promises currently
// in the notifyPromises array to resolve before logging the output
function waitForActionsToCompleteAndWriteQueueToFile(filePathToNotify) {
    const actionOutput = notifyQueue.splice(0, notifyQueue.length).join('');
    const allNotifyPromisesResolution = Promise.all(notifyPromises.splice(0, notifyPromises.length));
    allNotifyPromisesResolution.then(() => notifyFilePath(filePathToNotify, actionOutput));
}
// Logs output to the "notify" file
function notifyFilePath(filePathToNotify, outputToWrite) {
    if (filePathToNotify) {
        try {
            fs_1.default.appendFileSync(filePathToNotify, outputToWrite);
        }
        catch (e) {
            throw new Error((0, lang_1.i18n)(`${i18nKey}.errors.filePath`, { filePath: filePathToNotify }), { cause: e });
        }
    }
}
