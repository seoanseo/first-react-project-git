"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.trackUsage = void 0;
const axios_1 = __importDefault(require("axios"));
const getAxiosConfig_1 = require("../http/getAxiosConfig");
const logger_1 = require("./logger");
const http_1 = require("../http");
const config_1 = require("../config");
const fileMapper_1 = require("../api/fileMapper");
const lang_1 = require("../utils/lang");
const i18nKey = 'lib.trackUsage';
async function trackUsage(eventName, eventClass, meta = {}, accountId) {
    const usageEvent = {
        accountId,
        eventName,
        eventClass,
        meta,
    };
    const EVENT_TYPES = {
        VSCODE_EXTENSION_INTERACTION: 'vscode-extension-interaction',
        CLI_INTERACTION: 'cli-interaction',
    };
    let analyticsEndpoint;
    switch (eventName) {
        case EVENT_TYPES.CLI_INTERACTION:
            analyticsEndpoint = 'cms-cli-usage';
            break;
        case EVENT_TYPES.VSCODE_EXTENSION_INTERACTION:
            analyticsEndpoint = 'vscode-extension-usage';
            break;
        default:
            logger_1.logger.debug((0, lang_1.i18n)(`${i18nKey}.invalidEvent`, { eventName }));
    }
    const path = `${fileMapper_1.FILE_MAPPER_API_PATH}/${analyticsEndpoint}`;
    const accountConfig = accountId && (0, config_1.getAccountConfig)(accountId);
    if (accountConfig && accountConfig.authType === 'personalaccesskey') {
        logger_1.logger.debug((0, lang_1.i18n)(`${i18nKey}.sendingEventAuthenticated`));
        try {
            await http_1.http.post(accountId, {
                url: `${path}/authenticated`,
                data: usageEvent,
                resolveWithFullResponse: true,
            });
            return;
        }
        catch (e) {
            logger_1.logger.debug((0, lang_1.i18n)(`${i18nKey}.retryingEventUnauthenticated`));
        }
    }
    const env = (0, config_1.getEnv)(accountId);
    const axiosConfig = (0, getAxiosConfig_1.getAxiosConfig)({
        env,
        url: path,
        data: usageEvent,
        resolveWithFullResponse: true,
    });
    logger_1.logger.debug((0, lang_1.i18n)(`${i18nKey}.sendingEventUnauthenticated`));
    return (0, axios_1.default)({ ...axiosConfig, method: 'post' });
}
exports.trackUsage = trackUsage;
