"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.clearHubDbTableRows = exports.downloadHubDbTable = exports.updateHubDbTable = exports.createHubDbTable = exports.addRowsToHubDbTable = void 0;
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const prettier_1 = __importDefault(require("prettier"));
const hubdb_1 = require("../api/hubdb");
const path_2 = require("./path");
const lang_1 = require("../utils/lang");
const i18nKey = 'lib.hubdb';
function validateJsonPath(src) {
    if (path_1.default.extname(src) !== '.json') {
        throw new Error((0, lang_1.i18n)(`${i18nKey}.errors.invalidJsonPath`));
    }
}
function validateJsonFile(src) {
    let stats;
    try {
        stats = fs_extra_1.default.statSync(src);
    }
    catch (err) {
        throw new Error((0, lang_1.i18n)(`${i18nKey}.errors.invalidJsonFile`, { src }), {
            cause: err,
        });
    }
    if (!stats.isFile()) {
        throw new Error((0, lang_1.i18n)(`${i18nKey}.errors.invalidJsonFile`, { src }));
    }
    validateJsonPath(src);
}
async function addRowsToHubDbTable(accountId, tableId, rows = []) {
    const rowsToUpdate = rows.map(row => {
        const values = row.values;
        return {
            childTableId: '0',
            isSoftEditable: false,
            ...row,
            values,
        };
    });
    if (rowsToUpdate.length > 0) {
        await (0, hubdb_1.createRows)(accountId, tableId, rowsToUpdate);
    }
    const { data: { rowCount }, } = await (0, hubdb_1.publishTable)(accountId, tableId);
    return {
        tableId,
        rowCount,
    };
}
exports.addRowsToHubDbTable = addRowsToHubDbTable;
async function createHubDbTable(accountId, src) {
    validateJsonFile(src);
    const table = fs_extra_1.default.readJsonSync(src);
    const { rows, ...schema } = table;
    const { data: { id }, } = await (0, hubdb_1.createTable)(accountId, schema);
    return addRowsToHubDbTable(accountId, id, rows);
}
exports.createHubDbTable = createHubDbTable;
async function updateHubDbTable(accountId, tableId, src) {
    validateJsonFile(src);
    const table = fs_extra_1.default.readJsonSync(src);
    const { ...schema } = table;
    return (0, hubdb_1.updateTable)(accountId, tableId, schema);
}
exports.updateHubDbTable = updateHubDbTable;
function convertToJSON(table, rows) {
    const { allowChildTables, allowPublicApiAccess, columns, dynamicMetaTags, enableChildTablePages, label, name, useForPages, } = table;
    const cleanedColumns = columns
        .filter(column => !column.deleted || !column.archived)
        .map(({ 
    /* eslint-disable @typescript-eslint/no-unused-vars */
    id, deleted, archived, foreignIdsByName, foreignIdsById, 
    /* eslint-enable @typescript-eslint/no-unused-vars */
    ...cleanedColumn }) => cleanedColumn);
    const cleanedRows = rows.map(row => {
        return {
            path: row.path,
            name: row.name,
            values: row.values,
        };
    });
    return {
        name,
        useForPages,
        label,
        allowChildTables,
        allowPublicApiAccess,
        dynamicMetaTags,
        enableChildTablePages,
        columns: cleanedColumns,
        rows: cleanedRows,
    };
}
async function fetchAllRows(accountId, tableId) {
    let rows = [];
    let after = null;
    do {
        const axiosResponse = await (0, hubdb_1.fetchRows)(accountId, tableId, after ? { after } : undefined);
        const { paging, results } = axiosResponse.data;
        rows = rows.concat(results);
        after = paging && paging.next ? paging.next.after : null;
    } while (after !== null);
    return rows;
}
async function downloadHubDbTable(accountId, tableId, dest) {
    const { data: table } = await (0, hubdb_1.fetchTable)(accountId, tableId);
    dest = path_1.default.resolve((0, path_2.getCwd)(), dest || `${table.name}.hubdb.json`);
    if (fs_extra_1.default.pathExistsSync(dest)) {
        validateJsonFile(dest);
    }
    else {
        validateJsonPath(dest);
    }
    const rows = await fetchAllRows(accountId, tableId);
    const tableToWrite = JSON.stringify(convertToJSON(table, rows));
    const tableJson = await prettier_1.default.format(tableToWrite, {
        parser: 'json',
    });
    await fs_extra_1.default.outputFile(dest, tableJson);
    return { filePath: dest };
}
exports.downloadHubDbTable = downloadHubDbTable;
async function clearHubDbTableRows(accountId, tableId) {
    const rows = await fetchAllRows(accountId, tableId);
    await (0, hubdb_1.deleteRows)(accountId, tableId, rows.map(row => row.id));
    return {
        deletedRowCount: rows.length,
    };
}
exports.clearHubDbTableRows = clearHubDbTableRows;
