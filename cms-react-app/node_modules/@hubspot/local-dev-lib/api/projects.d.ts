/// <reference types="node" />
import { AxiosPromise } from 'axios';
import { QueryParams } from '../types/Http';
import { Project, FetchProjectResponse, UploadProjectResponse, ProjectSettings, FetchPlatformVersionResponse } from '../types/Project';
import { Build, FetchProjectBuildsResponse } from '../types/Build';
import { ComponentStructureResponse, ProjectComponentsMetadata } from '../types/ComponentStructure';
import { Deploy, ProjectDeployResponse } from '../types/Deploy';
import { ProjectLog } from '../types/ProjectLog';
import { MigrateAppResponse, CloneAppResponse, PollAppResponse } from '../types/Migration';
export declare function fetchProjects(accountId: number): AxiosPromise<FetchProjectResponse>;
export declare function createProject(accountId: number, name: string): AxiosPromise<Project>;
export declare function uploadProject(accountId: number, projectName: string, projectFile: string, uploadMessage: string, platformVersion?: string): AxiosPromise<UploadProjectResponse>;
export declare function fetchProject(accountId: number, projectName: string): AxiosPromise<Project>;
export declare function fetchProjectComponentsMetadata(accountId: number, projectId: number): AxiosPromise<ProjectComponentsMetadata>;
export declare function downloadProject(accountId: number, projectName: string, buildId: number): AxiosPromise<Buffer>;
export declare function deleteProject(accountId: number, projectName: string): AxiosPromise<void>;
export declare function fetchPlatformVersions(accountId: number): AxiosPromise<FetchPlatformVersionResponse>;
export declare function fetchProjectBuilds(accountId: number, projectName: string, params?: QueryParams): AxiosPromise<FetchProjectBuildsResponse>;
export declare function getBuildStatus(accountId: number, projectName: string, buildId: number): AxiosPromise<Build>;
export declare function getBuildStructure(accountId: number, projectName: string, buildId: number): AxiosPromise<ComponentStructureResponse>;
export declare function deployProject(accountId: number, projectName: string, buildId: number): AxiosPromise<ProjectDeployResponse>;
export declare function getDeployStatus(accountId: number, projectName: string, deployId: number): AxiosPromise<Deploy>;
export declare function getDeployStructure(accountId: number, projectName: string, deployId: number): AxiosPromise<ComponentStructureResponse>;
export declare function fetchProjectSettings(accountId: number, projectName: string): AxiosPromise<ProjectSettings>;
export declare function provisionBuild(accountId: number, projectName: string, platformVersion?: string): AxiosPromise<Build>;
export declare function queueBuild(accountId: number, projectName: string, platformVersion?: string): AxiosPromise<void>;
export declare function uploadFileToBuild(accountId: number, projectName: string, filePath: string, path: string): AxiosPromise<void>;
export declare function deleteFileFromBuild(accountId: number, projectName: string, path: string): AxiosPromise<void>;
export declare function cancelStagedBuild(accountId: number, projectName: string): AxiosPromise<void>;
type WarnLogsResponse = {
    logs: Array<ProjectLog>;
};
export declare function fetchBuildWarnLogs(accountId: number, projectName: string, buildId: number): AxiosPromise<WarnLogsResponse>;
export declare function fetchDeployWarnLogs(accountId: number, projectName: string, deployId: number): AxiosPromise<WarnLogsResponse>;
export declare function migrateApp(accountId: number, appId: number, projectName: string): AxiosPromise<MigrateAppResponse>;
export declare function checkMigrationStatus(accountId: number, id: number): AxiosPromise<PollAppResponse>;
export declare function cloneApp(accountId: number, appId: number): AxiosPromise<CloneAppResponse>;
export declare function checkCloneStatus(accountId: number, exportId: number): AxiosPromise<CloneAppResponse>;
export declare function downloadClonedProject(accountId: number, exportId: number): AxiosPromise<Buffer>;
export {};
